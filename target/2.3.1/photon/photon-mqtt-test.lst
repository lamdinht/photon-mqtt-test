
e:/Villanova/PhotonProjects/photon-mqtt-test/target/2.3.1/photon/photon-mqtt-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002154  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2170  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000080  20000000  080a2174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005e0  20000080  20000080  00030080  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a21f4  080a21f4  000221f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a221c  080a221c  0002221c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e46ba  00000000  00000000  00022220  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010fb6  00000000  00000000  001068da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00018c95  00000000  00000000  00117890  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001d68  00000000  00000000  00130525  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004808  00000000  00000000  0013228d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00023daf  00000000  00000000  00136a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000268fc  00000000  00000000  0015a844  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aece0  00000000  00000000  00181140  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004eac  00000000  00000000  0022fe20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fdbf 	bl	80a1bb0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fdc7 	bl	80a1bcc <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2174 	.word	0x080a2174
 80a004c:	20000080 	.word	0x20000080
 80a0050:	20000080 	.word	0x20000080
 80a0054:	2000065d 	.word	0x2000065d
 80a0058:	2000065d 	.word	0x2000065d

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 f9bf 	bl	80a13e0 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a2148 	.word	0x080a2148
 80a0080:	080a2168 	.word	0x080a2168

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b842 	b.w	80a010c <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f8b1 	bl	80a01f0 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f001 b95d 	b.w	80a1350 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 bd89 	b.w	80a0bac <malloc>

080a009a <_Znaj>:
 80a009a:	f000 bd87 	b.w	80a0bac <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 bd8d 	b.w	80a0bbc <free>

080a00a2 <_ZdaPv>:
 80a00a2:	f000 bd8b 	b.w	80a0bbc <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_Z8callbackPcPhj>:
MQTT MQTTclient(mqttServer, mqttPort, callback);
IPAddress IPServer(mqttServer);
TCPClient TCPclient;

// This function is called when a message is received
void callback(char* topic, byte* payload, unsigned int length) {
 80a00b8:	b5b0      	push	{r4, r5, r7, lr}
    char msg[length + 1];
 80a00ba:	f102 0308 	add.w	r3, r2, #8
 80a00be:	f023 0307 	bic.w	r3, r3, #7
void callback(char* topic, byte* payload, unsigned int length) {
 80a00c2:	af00      	add	r7, sp, #0
    char msg[length + 1];
 80a00c4:	ebad 0d03 	sub.w	sp, sp, r3
void callback(char* topic, byte* payload, unsigned int length) {
 80a00c8:	4605      	mov	r5, r0
    memcpy(msg, payload, length);
 80a00ca:	4668      	mov	r0, sp
void callback(char* topic, byte* payload, unsigned int length) {
 80a00cc:	4614      	mov	r4, r2
    memcpy(msg, payload, length);
 80a00ce:	f001 fd6f 	bl	80a1bb0 <memcpy>
    msg[length] = '\0';
 80a00d2:	2300      	movs	r3, #0
 80a00d4:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.print("Received a message on topic: ");
 80a00d8:	f001 fa98 	bl	80a160c <_Z16_fetch_usbserialv>
 80a00dc:	4909      	ldr	r1, [pc, #36]	; (80a0104 <_Z8callbackPcPhj+0x4c>)
 80a00de:	f001 f8a4 	bl	80a122a <_ZN5Print5printEPKc>
    Serial.print(topic);
 80a00e2:	f001 fa93 	bl	80a160c <_Z16_fetch_usbserialv>
 80a00e6:	4629      	mov	r1, r5
 80a00e8:	f001 f89f 	bl	80a122a <_ZN5Print5printEPKc>
    Serial.print(". Message: ");
 80a00ec:	f001 fa8e 	bl	80a160c <_Z16_fetch_usbserialv>
 80a00f0:	4905      	ldr	r1, [pc, #20]	; (80a0108 <_Z8callbackPcPhj+0x50>)
 80a00f2:	f001 f89a 	bl	80a122a <_ZN5Print5printEPKc>
    Serial.println(msg);
 80a00f6:	f001 fa89 	bl	80a160c <_Z16_fetch_usbserialv>
 80a00fa:	4669      	mov	r1, sp
 80a00fc:	f001 f8a8 	bl	80a1250 <_ZN5Print7printlnEPKc>
}
 80a0100:	46bd      	mov	sp, r7
 80a0102:	bdb0      	pop	{r4, r5, r7, pc}
 80a0104:	080a1d2c 	.word	0x080a1d2c
 80a0108:	080a1d4a 	.word	0x080a1d4a

080a010c <setup>:

void setup() {
 80a010c:	b530      	push	{r4, r5, lr}
 80a010e:	b087      	sub	sp, #28
    Serial.begin(9600);
 80a0110:	f001 fa7c 	bl	80a160c <_Z16_fetch_usbserialv>
 80a0114:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0118:	f001 fa5e 	bl	80a15d8 <_ZN9USBSerial5beginEl>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a011c:	4d25      	ldr	r5, [pc, #148]	; (80a01b4 <setup+0xa8>)

    // Connect to Wi-Fi
    //  WiFi.begin(ssid, password);                                    Wifi credentials already in this Photon
    while (WiFi.connecting()) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
 80a011e:	4c26      	ldr	r4, [pc, #152]	; (80a01b8 <setup+0xac>)
 80a0120:	2200      	movs	r2, #0
 80a0122:	6868      	ldr	r0, [r5, #4]
 80a0124:	4611      	mov	r1, r2
 80a0126:	f000 fce1 	bl	80a0aec <network_connecting>
    while (WiFi.connecting()) {
 80a012a:	b148      	cbz	r0, 80a0140 <setup+0x34>
        delay(1000);
 80a012c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0130:	f001 f8ce 	bl	80a12d0 <delay>
        Serial.println("Connecting to WiFi...");
 80a0134:	f001 fa6a 	bl	80a160c <_Z16_fetch_usbserialv>
 80a0138:	4621      	mov	r1, r4
 80a013a:	f001 f889 	bl	80a1250 <_ZN5Print7printlnEPKc>
    while (WiFi.connecting()) {
 80a013e:	e7ef      	b.n	80a0120 <setup+0x14>
    }
    Serial.println("Connected to WiFi");
 80a0140:	f001 fa64 	bl	80a160c <_Z16_fetch_usbserialv>
 80a0144:	491d      	ldr	r1, [pc, #116]	; (80a01bc <setup+0xb0>)
 80a0146:	f001 f883 	bl	80a1250 <_ZN5Print7printlnEPKc>

    // Connect to the MQTT broker using MQTT
    if (MQTTclient.connect(clientId, mqttUsername, mqttPassword)) {
 80a014a:	4b1d      	ldr	r3, [pc, #116]	; (80a01c0 <setup+0xb4>)
 80a014c:	4a1d      	ldr	r2, [pc, #116]	; (80a01c4 <setup+0xb8>)
 80a014e:	491e      	ldr	r1, [pc, #120]	; (80a01c8 <setup+0xbc>)
 80a0150:	681b      	ldr	r3, [r3, #0]
 80a0152:	6812      	ldr	r2, [r2, #0]
 80a0154:	6809      	ldr	r1, [r1, #0]
 80a0156:	481d      	ldr	r0, [pc, #116]	; (80a01cc <setup+0xc0>)
 80a0158:	f000 fb9c 	bl	80a0894 <_ZN4MQTT7connectEPKcS1_S1_>
 80a015c:	b1f0      	cbz	r0, 80a019c <setup+0x90>
        Serial.println("Connected to MQTT Broker");
 80a015e:	f001 fa55 	bl	80a160c <_Z16_fetch_usbserialv>
 80a0162:	491b      	ldr	r1, [pc, #108]	; (80a01d0 <setup+0xc4>)
 80a0164:	f001 f874 	bl	80a1250 <_ZN5Print7printlnEPKc>
        MQTTclient.subscribe("test/topic");
 80a0168:	491a      	ldr	r1, [pc, #104]	; (80a01d4 <setup+0xc8>)
 80a016a:	4818      	ldr	r0, [pc, #96]	; (80a01cc <setup+0xc0>)
 80a016c:	f000 f9cf 	bl	80a050e <_ZN4MQTT9subscribeEPKc>
    } else {
        Serial.println("Failed to connect to MQTT Broker");
    }

    // Connect to the MQTT broker using TCPClient
    if (TCPclient.connect(mqttServer, mqttPort))
 80a0170:	4919      	ldr	r1, [pc, #100]	; (80a01d8 <setup+0xcc>)
 80a0172:	4668      	mov	r0, sp
 80a0174:	f001 f9d4 	bl	80a1520 <_ZN9IPAddressC1EPKh>
 80a0178:	4a18      	ldr	r2, [pc, #96]	; (80a01dc <setup+0xd0>)
 80a017a:	2300      	movs	r3, #0
 80a017c:	4669      	mov	r1, sp
 80a017e:	8812      	ldrh	r2, [r2, #0]
 80a0180:	4817      	ldr	r0, [pc, #92]	; (80a01e0 <setup+0xd4>)
 80a0182:	f000 fe1d 	bl	80a0dc0 <_ZN9TCPClient7connectE9IPAddresstm>
 80a0186:	b178      	cbz	r0, 80a01a8 <setup+0x9c>
    {
      Serial.println("TCP connected");
 80a0188:	f001 fa40 	bl	80a160c <_Z16_fetch_usbserialv>
 80a018c:	4915      	ldr	r1, [pc, #84]	; (80a01e4 <setup+0xd8>)
 80a018e:	f001 f85f 	bl	80a1250 <_ZN5Print7printlnEPKc>
      TCPclient.println();
 80a0192:	4813      	ldr	r0, [pc, #76]	; (80a01e0 <setup+0xd4>)
 80a0194:	f001 f850 	bl	80a1238 <_ZN5Print7printlnEv>
    }
    else
    {
      Serial.println("TCP connection failed");
    }
}
 80a0198:	b007      	add	sp, #28
 80a019a:	bd30      	pop	{r4, r5, pc}
        Serial.println("Failed to connect to MQTT Broker");
 80a019c:	f001 fa36 	bl	80a160c <_Z16_fetch_usbserialv>
 80a01a0:	4911      	ldr	r1, [pc, #68]	; (80a01e8 <setup+0xdc>)
 80a01a2:	f001 f855 	bl	80a1250 <_ZN5Print7printlnEPKc>
 80a01a6:	e7e3      	b.n	80a0170 <setup+0x64>
      Serial.println("TCP connection failed");
 80a01a8:	f001 fa30 	bl	80a160c <_Z16_fetch_usbserialv>
 80a01ac:	490f      	ldr	r1, [pc, #60]	; (80a01ec <setup+0xe0>)
 80a01ae:	f001 f84f 	bl	80a1250 <_ZN5Print7printlnEPKc>
}
 80a01b2:	e7f1      	b.n	80a0198 <setup+0x8c>
 80a01b4:	20000598 	.word	0x20000598
 80a01b8:	080a1d56 	.word	0x080a1d56
 80a01bc:	080a1d6c 	.word	0x080a1d6c
 80a01c0:	20000004 	.word	0x20000004
 80a01c4:	20000010 	.word	0x20000010
 80a01c8:	20000000 	.word	0x20000000
 80a01cc:	20000098 	.word	0x20000098
 80a01d0:	080a1d7e 	.word	0x080a1d7e
 80a01d4:	080a1d97 	.word	0x080a1d97
 80a01d8:	2000000a 	.word	0x2000000a
 80a01dc:	20000008 	.word	0x20000008
 80a01e0:	200000f8 	.word	0x200000f8
 80a01e4:	080a1dc3 	.word	0x080a1dc3
 80a01e8:	080a1da2 	.word	0x080a1da2
 80a01ec:	080a1dd1 	.word	0x080a1dd1

080a01f0 <loop>:

void loop() {
 80a01f0:	4770      	bx	lr
	...

080a01f4 <_GLOBAL__sub_I_mqttServer>:
MQTT MQTTclient(mqttServer, mqttPort, callback);
 80a01f4:	2300      	movs	r3, #0
 80a01f6:	b513      	push	{r0, r1, r4, lr}
MQTT MQTTclient(mqttServer, mqttPort, callback);
 80a01f8:	4a09      	ldr	r2, [pc, #36]	; (80a0220 <_GLOBAL__sub_I_mqttServer+0x2c>)
 80a01fa:	4c0a      	ldr	r4, [pc, #40]	; (80a0224 <_GLOBAL__sub_I_mqttServer+0x30>)
 80a01fc:	9300      	str	r3, [sp, #0]
 80a01fe:	4621      	mov	r1, r4
 80a0200:	4b09      	ldr	r3, [pc, #36]	; (80a0228 <_GLOBAL__sub_I_mqttServer+0x34>)
 80a0202:	8812      	ldrh	r2, [r2, #0]
 80a0204:	4809      	ldr	r0, [pc, #36]	; (80a022c <_GLOBAL__sub_I_mqttServer+0x38>)
 80a0206:	f000 f85b 	bl	80a02c0 <_ZN4MQTTC1EPKhtPFvPcPhjEb>
IPAddress IPServer(mqttServer);
 80a020a:	4621      	mov	r1, r4
 80a020c:	4808      	ldr	r0, [pc, #32]	; (80a0230 <_GLOBAL__sub_I_mqttServer+0x3c>)
 80a020e:	f001 f987 	bl	80a1520 <_ZN9IPAddressC1EPKh>
TCPClient TCPclient;
 80a0212:	4808      	ldr	r0, [pc, #32]	; (80a0234 <_GLOBAL__sub_I_mqttServer+0x40>)
 80a0214:	b002      	add	sp, #8
 80a0216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
TCPClient TCPclient;
 80a021a:	f000 bf2b 	b.w	80a1074 <_ZN9TCPClientC1Ev>
 80a021e:	bf00      	nop
 80a0220:	20000008 	.word	0x20000008
 80a0224:	2000000a 	.word	0x2000000a
 80a0228:	080a00b9 	.word	0x080a00b9
 80a022c:	20000098 	.word	0x20000098
 80a0230:	20000080 	.word	0x20000080
 80a0234:	200000f8 	.word	0x200000f8

080a0238 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
 80a0238:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
 80a023c:	b510      	push	{r4, lr}
 80a023e:	4604      	mov	r4, r0
            this->mqtt = mqtt;
 80a0240:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
 80a0242:	b113      	cbz	r3, 80a024a <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
 80a0244:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80a0246:	f000 fb4d 	bl	80a08e4 <os_mutex_lock>
#endif
#endif
#endif
        }
 80a024a:	4620      	mov	r0, r4
 80a024c:	bd10      	pop	{r4, pc}

080a024e <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
 80a024e:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
 80a0250:	6803      	ldr	r3, [r0, #0]
        ~MutexLocker() {
 80a0252:	4604      	mov	r4, r0
            if (mqtt->thread)
 80a0254:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80a0258:	b112      	cbz	r2, 80a0260 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
 80a025a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80a025c:	f000 fb4a 	bl	80a08f4 <os_mutex_unlock>
#endif
#endif
#endif
        }
 80a0260:	4620      	mov	r0, r4
 80a0262:	bd10      	pop	{r4, pc}

080a0264 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
 80a0264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0266:	461f      	mov	r7, r3
 80a0268:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80a026c:	4604      	mov	r4, r0
 80a026e:	460d      	mov	r5, r1
 80a0270:	4616      	mov	r6, r2
    if (thread) {
 80a0272:	b123      	cbz	r3, 80a027e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1a>
        this->thread = true;
 80a0274:	2301      	movs	r3, #1
        os_mutex_create(&mutex_lock);
 80a0276:	3058      	adds	r0, #88	; 0x58
        this->thread = true;
 80a0278:	7103      	strb	r3, [r0, #4]
        os_mutex_create(&mutex_lock);
 80a027a:	f000 fb2b 	bl	80a08d4 <os_mutex_create>
    }
    this->callback = callback;
 80a027e:	9b08      	ldr	r3, [sp, #32]
 80a0280:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
 80a0282:	2300      	movs	r3, #0
 80a0284:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
 80a0286:	b106      	cbz	r6, 80a028a <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x26>
        this->ip = ip;
 80a0288:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
 80a028a:	b125      	cbz	r5, 80a0296 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x32>
        this->domain = domain;
 80a028c:	4629      	mov	r1, r5
 80a028e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0292:	f000 ff93 	bl	80a11bc <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a0296:	9b06      	ldr	r3, [sp, #24]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a0298:	69e0      	ldr	r0, [r4, #28]
    this->keepalive = keepalive;
 80a029a:	6523      	str	r3, [r4, #80]	; 0x50
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a029c:	9b07      	ldr	r3, [sp, #28]
    this->port = port;
 80a029e:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a02a2:	2bff      	cmp	r3, #255	; 0xff
 80a02a4:	bfb8      	it	lt
 80a02a6:	23ff      	movlt	r3, #255	; 0xff
 80a02a8:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a02ac:	b108      	cbz	r0, 80a02b2 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x4e>
      delete[] buffer;
 80a02ae:	f7ff fef8 	bl	80a00a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a02b2:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a02b6:	f7ff fef0 	bl	80a009a <_Znaj>
 80a02ba:	61e0      	str	r0, [r4, #28]
}
 80a02bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a02c0 <_ZN4MQTTC1EPKhtPFvPcPhjEb>:
MQTT::MQTT(const uint8_t *ip, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
 80a02c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a02c4:	4604      	mov	r4, r0
            bool thread) {
 80a02c6:	2500      	movs	r5, #0
MQTT::MQTT(const uint8_t *ip, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
 80a02c8:	4698      	mov	r8, r3
 80a02ca:	4617      	mov	r7, r2
 80a02cc:	460e      	mov	r6, r1
            bool thread) {
 80a02ce:	f000 fed1 	bl	80a1074 <_ZN9TCPClientC1Ev>
 80a02d2:	490d      	ldr	r1, [pc, #52]	; (80a0308 <_ZN4MQTTC1EPKhtPFvPcPhjEb+0x48>)
 80a02d4:	61e5      	str	r5, [r4, #28]
 80a02d6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a02da:	f000 ff5c 	bl	80a1196 <_ZN6StringC1EPKc>
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
 80a02de:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80a02e2:	22ff      	movs	r2, #255	; 0xff
 80a02e4:	e9cd 8302 	strd	r8, r3, [sp, #8]
 80a02e8:	230f      	movs	r3, #15
 80a02ea:	4620      	mov	r0, r4
 80a02ec:	e9cd 3200 	strd	r3, r2, [sp]
 80a02f0:	4629      	mov	r1, r5
 80a02f2:	463b      	mov	r3, r7
 80a02f4:	4632      	mov	r2, r6
            bool thread) {
 80a02f6:	64a5      	str	r5, [r4, #72]	; 0x48
 80a02f8:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(NULL, ip, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
 80a02fc:	f7ff ffb2 	bl	80a0264 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
 80a0300:	4620      	mov	r0, r4
 80a0302:	b004      	add	sp, #16
 80a0304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0308:	080a1e77 	.word	0x080a1e77

080a030c <_ZN4MQTT8readByteEv>:
    }
    Serial.println("Error in isConnected()");
    return false;
}

uint8_t MQTT::readByte() {
 80a030c:	b510      	push	{r4, lr}
 80a030e:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a0310:	4620      	mov	r0, r4
 80a0312:	f000 fdc5 	bl	80a0ea0 <_ZN9TCPClient9availableEv>
 80a0316:	2800      	cmp	r0, #0
 80a0318:	d0fa      	beq.n	80a0310 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a031a:	4620      	mov	r0, r4
 80a031c:	f000 fd03 	bl	80a0d26 <_ZN9TCPClient4readEv>
}
 80a0320:	b2c0      	uxtb	r0, r0
 80a0322:	bd10      	pop	{r4, pc}

080a0324 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0328:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a032a:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a032c:	4689      	mov	r9, r1
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a032e:	2701      	movs	r7, #1
    buffer[len++] = readByte();
 80a0330:	f7ff ffec 	bl	80a030c <_ZN4MQTT8readByteEv>
    uint16_t length = 0;
 80a0334:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
 80a0338:	7020      	strb	r0, [r4, #0]
 80a033a:	463c      	mov	r4, r7
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a033c:	69eb      	ldr	r3, [r5, #28]
 80a033e:	f893 a000 	ldrb.w	sl, [r3]
 80a0342:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a0346:	4628      	mov	r0, r5
 80a0348:	f7ff ffe0 	bl	80a030c <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a034c:	4626      	mov	r6, r4
 80a034e:	69eb      	ldr	r3, [r5, #28]
 80a0350:	3401      	adds	r4, #1
 80a0352:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a0354:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a0358:	fb03 8807 	mla	r8, r3, r7, r8
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a035c:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
 80a035e:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a0360:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
 80a0364:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    } while ((digit & 128) != 0);
 80a0368:	d4ed      	bmi.n	80a0346 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
 80a036a:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a036c:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
 80a0370:	f889 3000 	strb.w	r3, [r9]
    if (isPublish) {
 80a0374:	d124      	bne.n	80a03c0 <_ZN4MQTT10readPacketEPh+0x9c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a0376:	4628      	mov	r0, r5
 80a0378:	69ef      	ldr	r7, [r5, #28]
 80a037a:	f7ff ffc7 	bl	80a030c <_ZN4MQTT8readByteEv>
 80a037e:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
 80a0380:	4628      	mov	r0, r5
 80a0382:	69ef      	ldr	r7, [r5, #28]
 80a0384:	f7ff ffc2 	bl	80a030c <_ZN4MQTT8readByteEv>
 80a0388:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
 80a038a:	3602      	adds	r6, #2
        buffer[len++] = readByte();
 80a038c:	b2b6      	uxth	r6, r6
 80a038e:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a0390:	2602      	movs	r6, #2
        buffer[len++] = readByte();
 80a0392:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a0394:	b2b6      	uxth	r6, r6
 80a0396:	46b1      	mov	r9, r6
 80a0398:	4627      	mov	r7, r4
 80a039a:	45c1      	cmp	r9, r8
 80a039c:	d212      	bcs.n	80a03c4 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a039e:	4628      	mov	r0, r5
 80a03a0:	f7ff ffb4 	bl	80a030c <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a03a4:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
    for (uint16_t i = start;i<length;i++) {
 80a03a8:	f109 0901 	add.w	r9, r9, #1
        if (len < this->maxpacketsize) {
 80a03ac:	42bb      	cmp	r3, r7
            buffer[len] = digit;
 80a03ae:	bf88      	it	hi
 80a03b0:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
 80a03b2:	fa1f f989 	uxth.w	r9, r9
            buffer[len] = digit;
 80a03b6:	bf88      	it	hi
 80a03b8:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
 80a03ba:	3701      	adds	r7, #1
 80a03bc:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
 80a03be:	e7ec      	b.n	80a039a <_ZN4MQTT10readPacketEPh+0x76>
    uint8_t start = 0;
 80a03c0:	2600      	movs	r6, #0
 80a03c2:	e7e7      	b.n	80a0394 <_ZN4MQTT10readPacketEPh+0x70>
 80a03c4:	eba8 0006 	sub.w	r0, r8, r6
 80a03c8:	45b0      	cmp	r8, r6
 80a03ca:	bf2c      	ite	cs
 80a03cc:	4606      	movcs	r6, r0
 80a03ce:	2600      	movcc	r6, #0
    }

    if (len > this->maxpacketsize) {
 80a03d0:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
 80a03d4:	4434      	add	r4, r6
 80a03d6:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a03d8:	42a0      	cmp	r0, r4
 80a03da:	bf2c      	ite	cs
 80a03dc:	4620      	movcs	r0, r4
 80a03de:	2000      	movcc	r0, #0
 80a03e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a03e4 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a03e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a03e6:	468c      	mov	ip, r1
 80a03e8:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a03ea:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a03ec:	4607      	mov	r7, r0
    uint8_t llen = 0;
 80a03ee:	2300      	movs	r3, #0
    do {
        digit = len % 128;
 80a03f0:	46ae      	mov	lr, r5
 80a03f2:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
 80a03f6:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a03fa:	a802      	add	r0, sp, #8
            digit |= 0x80;
 80a03fc:	bf88      	it	hi
 80a03fe:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        lenBuf[pos++] = digit;
 80a0402:	1c5c      	adds	r4, r3, #1
        llen++;
    } while(len > 0);
 80a0404:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
 80a0408:	4403      	add	r3, r0
        len = len / 128;
 80a040a:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
 80a040e:	b2e4      	uxtb	r4, r4
 80a0410:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
 80a0414:	d810      	bhi.n	80a0438 <_ZN4MQTT5writeEhPht+0x54>

    buf[4-llen] = header;
 80a0416:	f1c4 0304 	rsb	r3, r4, #4
 80a041a:	18d1      	adds	r1, r2, r3
 80a041c:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a0420:	f1c4 0305 	rsb	r3, r4, #5
 80a0424:	4413      	add	r3, r2
 80a0426:	a801      	add	r0, sp, #4
 80a0428:	3205      	adds	r2, #5
 80a042a:	4293      	cmp	r3, r2
 80a042c:	d006      	beq.n	80a043c <_ZN4MQTT5writeEhPht+0x58>
        buf[5-llen+i] = lenBuf[i];
 80a042e:	f810 5b01 	ldrb.w	r5, [r0], #1
 80a0432:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
 80a0436:	e7f8      	b.n	80a042a <_ZN4MQTT5writeEhPht+0x46>
        lenBuf[pos++] = digit;
 80a0438:	4623      	mov	r3, r4
 80a043a:	e7d9      	b.n	80a03f0 <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a043c:	1c72      	adds	r2, r6, #1
 80a043e:	4422      	add	r2, r4
 80a0440:	4638      	mov	r0, r7
 80a0442:	f000 fbf2 	bl	80a0c2a <_ZN9TCPClient5writeEPKhj>
 80a0446:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0448:	f000 fa3c 	bl	80a08c4 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a044c:	3401      	adds	r4, #1
    lastOutActivity = millis();
 80a044e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a0450:	4434      	add	r4, r6
 80a0452:	b2a8      	uxth	r0, r5
}
 80a0454:	1a23      	subs	r3, r4, r0
 80a0456:	4258      	negs	r0, r3
 80a0458:	4158      	adcs	r0, r3
 80a045a:	b003      	add	sp, #12
 80a045c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a045e <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a045e:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a0460:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0462:	4604      	mov	r4, r0
    pos += 2;
 80a0464:	b298      	uxth	r0, r3
 80a0466:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
 80a0468:	5ccd      	ldrb	r5, [r1, r3]
 80a046a:	b14d      	cbz	r5, 80a0480 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a046c:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a0470:	1c5f      	adds	r7, r3, #1
 80a0472:	4286      	cmp	r6, r0
 80a0474:	d904      	bls.n	80a0480 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a0476:	1c46      	adds	r6, r0, #1
 80a0478:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
 80a047a:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
 80a047c:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
 80a047e:	e7f3      	b.n	80a0468 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a0480:	b299      	uxth	r1, r3
 80a0482:	1a44      	subs	r4, r0, r1
 80a0484:	4422      	add	r2, r4
 80a0486:	1209      	asrs	r1, r1, #8
 80a0488:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a048c:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
 80a0490:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0492 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a0492:	b538      	push	{r3, r4, r5, lr}
 80a0494:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
 80a0496:	f000 fd94 	bl	80a0fc2 <_ZN9TCPClient9connectedEv>
 80a049a:	2800      	cmp	r0, #0
 80a049c:	bf14      	ite	ne
 80a049e:	2501      	movne	r5, #1
 80a04a0:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
 80a04a2:	d102      	bne.n	80a04aa <_ZN4MQTT11isConnectedEv+0x18>
 80a04a4:	4620      	mov	r0, r4
 80a04a6:	f000 fd35 	bl	80a0f14 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a04aa:	4628      	mov	r0, r5
 80a04ac:	bd38      	pop	{r3, r4, r5, pc}

080a04ae <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80a04ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a04b0:	4604      	mov	r4, r0
 80a04b2:	460f      	mov	r7, r1
 80a04b4:	4616      	mov	r6, r2
    if (isConnected()) {
 80a04b6:	f7ff ffec 	bl	80a0492 <_ZN4MQTT11isConnectedEv>
 80a04ba:	4605      	mov	r5, r0
 80a04bc:	b310      	cbz	r0, 80a0504 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
 80a04be:	4621      	mov	r1, r4
 80a04c0:	a801      	add	r0, sp, #4
 80a04c2:	f7ff feb9 	bl	80a0238 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
 80a04c6:	8c23      	ldrh	r3, [r4, #32]
 80a04c8:	3301      	adds	r3, #1
 80a04ca:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 80a04cc:	b1eb      	cbz	r3, 80a050a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
 80a04ce:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
 80a04d0:	8c23      	ldrh	r3, [r4, #32]
 80a04d2:	69e2      	ldr	r2, [r4, #28]
 80a04d4:	121b      	asrs	r3, r3, #8
 80a04d6:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 80a04d8:	69e3      	ldr	r3, [r4, #28]
 80a04da:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 80a04dc:	4639      	mov	r1, r7
        buffer[length++] = (nextMsgId & 0xFF);
 80a04de:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 80a04e0:	69e2      	ldr	r2, [r4, #28]
 80a04e2:	2307      	movs	r3, #7
 80a04e4:	4620      	mov	r0, r4
 80a04e6:	f7ff ffba 	bl	80a045e <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 80a04ea:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a04ec:	2182      	movs	r1, #130	; 0x82
        buffer[length++] = qos;
 80a04ee:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a04f0:	3804      	subs	r0, #4
 80a04f2:	b283      	uxth	r3, r0
 80a04f4:	69e2      	ldr	r2, [r4, #28]
 80a04f6:	4620      	mov	r0, r4
 80a04f8:	f7ff ff74 	bl	80a03e4 <_ZN4MQTT5writeEhPht>
 80a04fc:	4605      	mov	r5, r0
        MutexLocker lock(this);
 80a04fe:	a801      	add	r0, sp, #4
 80a0500:	f7ff fea5 	bl	80a024e <_ZN4MQTT11MutexLockerD1Ev>
}
 80a0504:	4628      	mov	r0, r5
 80a0506:	b003      	add	sp, #12
 80a0508:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
 80a050a:	2301      	movs	r3, #1
 80a050c:	e7df      	b.n	80a04ce <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

080a050e <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
 80a050e:	2200      	movs	r2, #0
 80a0510:	f7ff bfcd 	b.w	80a04ae <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

080a0514 <_ZN5Print7printlnIhLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
 80a0514:	b538      	push	{r3, r4, r5, lr}
 80a0516:	4605      	mov	r5, r0

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
 80a0518:	b942      	cbnz	r2, 80a052c <_ZN5Print7printlnIhLi0EEEjT_i+0x18>
        return write(n);
 80a051a:	6803      	ldr	r3, [r0, #0]
 80a051c:	689b      	ldr	r3, [r3, #8]
 80a051e:	4798      	blx	r3
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0520:	4604      	mov	r4, r0
        n += println();
 80a0522:	4628      	mov	r0, r5
 80a0524:	f000 fe88 	bl	80a1238 <_ZN5Print7printlnEv>
    }
 80a0528:	4420      	add	r0, r4
 80a052a:	bd38      	pop	{r3, r4, r5, pc}
        return printNumber(val, base) + t;
 80a052c:	b2d2      	uxtb	r2, r2
 80a052e:	f000 fe99 	bl	80a1264 <_ZN5Print11printNumberEmh>
 80a0532:	e7f5      	b.n	80a0520 <_ZN5Print7printlnIhLi0EEEjT_i+0xc>

080a0534 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a0534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0538:	b093      	sub	sp, #76	; 0x4c
 80a053a:	461e      	mov	r6, r3
 80a053c:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 80a0540:	4604      	mov	r4, r0
 80a0542:	4689      	mov	r9, r1
 80a0544:	4617      	mov	r7, r2
 80a0546:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80a054a:	9303      	str	r3, [sp, #12]
    if (!isConnected()) {
 80a054c:	f7ff ffa1 	bl	80a0492 <_ZN4MQTT11isConnectedEv>
 80a0550:	4605      	mov	r5, r0
 80a0552:	2800      	cmp	r0, #0
 80a0554:	f040 817d 	bne.w	80a0852 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x31e>
        MutexLocker lock(this);
 80a0558:	4621      	mov	r1, r4
 80a055a:	a805      	add	r0, sp, #20
 80a055c:	f7ff fe6c 	bl	80a0238 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL){
 80a0560:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a0562:	2900      	cmp	r1, #0
 80a0564:	f040 812d 	bne.w	80a07c2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x28e>
            result = _client.connect(this->domain.c_str(), this->port);
 80a0568:	462b      	mov	r3, r5
 80a056a:	4620      	mov	r0, r4
 80a056c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0570:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0572:	f000 fd97 	bl	80a10a4 <_ZN9TCPClient7connectEPKctm>
            result = _client.connect(this->ip, this->port);
 80a0576:	4683      	mov	fp, r0
        if (!result){
 80a0578:	bb28      	cbnz	r0, 80a05c6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x92>
            IPAddress server(ip[0], ip[1], ip[2], ip[3]);
 80a057a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80a057c:	7883      	ldrb	r3, [r0, #2]
 80a057e:	7842      	ldrb	r2, [r0, #1]
 80a0580:	7801      	ldrb	r1, [r0, #0]
 80a0582:	78c0      	ldrb	r0, [r0, #3]
 80a0584:	9000      	str	r0, [sp, #0]
 80a0586:	a806      	add	r0, sp, #24
 80a0588:	f000 ffb4 	bl	80a14f4 <_ZN9IPAddressC1Ehhhh>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a058c:	4bb4      	ldr	r3, [pc, #720]	; (80a0860 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32c>)
 80a058e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 80a0592:	f10d 0e1c 	add.w	lr, sp, #28
 80a0596:	930c      	str	r3, [sp, #48]	; 0x30
 80a0598:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80a059c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80a05a0:	f8de 3000 	ldr.w	r3, [lr]
            if (_client.connect(server, this->port)){
 80a05a4:	4620      	mov	r0, r4
 80a05a6:	f88c 3000 	strb.w	r3, [ip]
 80a05aa:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a05ae:	465b      	mov	r3, fp
 80a05b0:	a90c      	add	r1, sp, #48	; 0x30
 80a05b2:	f000 fc05 	bl	80a0dc0 <_ZN9TCPClient7connectE9IPAddresstm>
 80a05b6:	2800      	cmp	r0, #0
 80a05b8:	f000 810e 	beq.w	80a07d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x2a4>
                Serial.println("Success");
 80a05bc:	f001 f826 	bl	80a160c <_Z16_fetch_usbserialv>
 80a05c0:	49a8      	ldr	r1, [pc, #672]	; (80a0864 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x330>)
                Serial.println("Failed using IPAddress");
 80a05c2:	f000 fe45 	bl	80a1250 <_ZN5Print7printlnEPKc>
        Serial.println("\n\n Passed target address info ");
 80a05c6:	f001 f821 	bl	80a160c <_Z16_fetch_usbserialv>
 80a05ca:	49a7      	ldr	r1, [pc, #668]	; (80a0868 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x334>)
 80a05cc:	f000 fe40 	bl	80a1250 <_ZN5Print7printlnEPKc>
        Serial.println("IP:");
 80a05d0:	f001 f81c 	bl	80a160c <_Z16_fetch_usbserialv>
 80a05d4:	49a5      	ldr	r1, [pc, #660]	; (80a086c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x338>)
 80a05d6:	f000 fe3b 	bl	80a1250 <_ZN5Print7printlnEPKc>
        Serial.println(ip == NULL);
 80a05da:	f001 f817 	bl	80a160c <_Z16_fetch_usbserialv>
 80a05de:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a05e0:	4682      	mov	sl, r0
 80a05e2:	fab1 f181 	clz	r1, r1
 80a05e6:	220a      	movs	r2, #10
 80a05e8:	0949      	lsrs	r1, r1, #5
 80a05ea:	f000 fe3b 	bl	80a1264 <_ZN5Print11printNumberEmh>
        n += println();
 80a05ee:	4650      	mov	r0, sl
 80a05f0:	f000 fe22 	bl	80a1238 <_ZN5Print7printlnEv>
        Serial.println(ip[0]);
 80a05f4:	f001 f80a 	bl	80a160c <_Z16_fetch_usbserialv>
 80a05f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80a05fa:	220a      	movs	r2, #10
 80a05fc:	7819      	ldrb	r1, [r3, #0]
 80a05fe:	f7ff ff89 	bl	80a0514 <_ZN5Print7printlnIhLi0EEEjT_i>
        Serial.println(ip[1]);
 80a0602:	f001 f803 	bl	80a160c <_Z16_fetch_usbserialv>
 80a0606:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80a0608:	220a      	movs	r2, #10
 80a060a:	7859      	ldrb	r1, [r3, #1]
 80a060c:	f7ff ff82 	bl	80a0514 <_ZN5Print7printlnIhLi0EEEjT_i>
        Serial.println(ip[2]);
 80a0610:	f000 fffc 	bl	80a160c <_Z16_fetch_usbserialv>
 80a0614:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80a0616:	220a      	movs	r2, #10
 80a0618:	7899      	ldrb	r1, [r3, #2]
 80a061a:	f7ff ff7b 	bl	80a0514 <_ZN5Print7printlnIhLi0EEEjT_i>
        Serial.println(ip[3]);
 80a061e:	f000 fff5 	bl	80a160c <_Z16_fetch_usbserialv>
 80a0622:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80a0624:	220a      	movs	r2, #10
 80a0626:	78d9      	ldrb	r1, [r3, #3]
 80a0628:	f7ff ff74 	bl	80a0514 <_ZN5Print7printlnIhLi0EEEjT_i>
        Serial.println(domain);
 80a062c:	f000 ffee 	bl	80a160c <_Z16_fetch_usbserialv>
 80a0630:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0632:	f000 fe0d 	bl	80a1250 <_ZN5Print7printlnEPKc>
        Serial.println(this->domain.c_str());
 80a0636:	f000 ffe9 	bl	80a160c <_Z16_fetch_usbserialv>
 80a063a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a063c:	f000 fe08 	bl	80a1250 <_ZN5Print7printlnEPKc>
        Serial.println("Port:");
 80a0640:	f000 ffe4 	bl	80a160c <_Z16_fetch_usbserialv>
 80a0644:	498a      	ldr	r1, [pc, #552]	; (80a0870 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x33c>)
 80a0646:	f000 fe03 	bl	80a1250 <_ZN5Print7printlnEPKc>
        Serial.println(port);
 80a064a:	f000 ffdf 	bl	80a160c <_Z16_fetch_usbserialv>
 80a064e:	4682      	mov	sl, r0
        return printNumber(val, base) + t;
 80a0650:	220a      	movs	r2, #10
 80a0652:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 80a0656:	f000 fe05 	bl	80a1264 <_ZN5Print11printNumberEmh>
        n += println();
 80a065a:	4650      	mov	r0, sl
 80a065c:	f000 fdec 	bl	80a1238 <_ZN5Print7printlnEv>
        Serial.println("Connecting...");
 80a0660:	f000 ffd4 	bl	80a160c <_Z16_fetch_usbserialv>
 80a0664:	4983      	ldr	r1, [pc, #524]	; (80a0874 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x340>)
 80a0666:	f000 fdf3 	bl	80a1250 <_ZN5Print7printlnEPKc>
        Serial.println("Connection Status:");
 80a066a:	f000 ffcf 	bl	80a160c <_Z16_fetch_usbserialv>
 80a066e:	4982      	ldr	r1, [pc, #520]	; (80a0878 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x344>)
 80a0670:	f000 fdee 	bl	80a1250 <_ZN5Print7printlnEPKc>
        Serial.println(result);
 80a0674:	f000 ffca 	bl	80a160c <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
 80a0678:	f1bb 0f00 	cmp.w	fp, #0
 80a067c:	4682      	mov	sl, r0
 80a067e:	f280 80af 	bge.w	80a07e0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x2ac>
            t = print('-');
 80a0682:	212d      	movs	r1, #45	; 0x2d
 80a0684:	f000 fdd5 	bl	80a1232 <_ZN5Print5printEc>
            val = -n;
 80a0688:	f1cb 0100 	rsb	r1, fp, #0
        return printNumber(val, base) + t;
 80a068c:	220a      	movs	r2, #10
 80a068e:	4650      	mov	r0, sl
 80a0690:	f000 fde8 	bl	80a1264 <_ZN5Print11printNumberEmh>
        n += println();
 80a0694:	4650      	mov	r0, sl
 80a0696:	f000 fdcf 	bl	80a1238 <_ZN5Print7printlnEv>
        Serial.println("\n\n");
 80a069a:	f000 ffb7 	bl	80a160c <_Z16_fetch_usbserialv>
 80a069e:	4977      	ldr	r1, [pc, #476]	; (80a087c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x348>)
 80a06a0:	f000 fdd6 	bl	80a1250 <_ZN5Print7printlnEPKc>
        if (result) {
 80a06a4:	f1bb 0f00 	cmp.w	fp, #0
 80a06a8:	f000 80cd 	beq.w	80a0846 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x312>
            nextMsgId = 1;
 80a06ac:	2301      	movs	r3, #1
 80a06ae:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
 80a06b0:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80a06b4:	69e2      	ldr	r2, [r4, #28]
 80a06b6:	2b04      	cmp	r3, #4
 80a06b8:	f040 8094 	bne.w	80a07e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x2b0>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a06bc:	4b70      	ldr	r3, [pc, #448]	; (80a0880 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x34c>)
 80a06be:	6818      	ldr	r0, [r3, #0]
 80a06c0:	8899      	ldrh	r1, [r3, #4]
 80a06c2:	799b      	ldrb	r3, [r3, #6]
 80a06c4:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
 80a06c8:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
 80a06cc:	900c      	str	r0, [sp, #48]	; 0x30
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a06ce:	f8c2 0005 	str.w	r0, [r2, #5]
 80a06d2:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 80a06d6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80a06da:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
 80a06dc:	230c      	movs	r3, #12
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a06de:	f8a2 1009 	strh.w	r1, [r2, #9]
            if (willTopic) {
 80a06e2:	f1b8 0f00 	cmp.w	r8, #0
 80a06e6:	f000 8092 	beq.w	80a080e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x2da>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a06ea:	f89d 0078 	ldrb.w	r0, [sp, #120]	; 0x78
 80a06ee:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 80a06f2:	0140      	lsls	r0, r0, #5
 80a06f4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80a06f8:	f040 0006 	orr.w	r0, r0, #6
 80a06fc:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
 80a06fe:	9a03      	ldr	r2, [sp, #12]
 80a0700:	b90a      	cbnz	r2, 80a0706 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1d2>
              v = v&0xfd;
 80a0702:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
 80a0706:	b127      	cbz	r7, 80a0712 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1de>
                if(pass != NULL) {
 80a0708:	2e00      	cmp	r6, #0
 80a070a:	f040 8082 	bne.w	80a0812 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x2de>
                v = v|0x80;
 80a070e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
 80a0712:	69e2      	ldr	r2, [r4, #28]
 80a0714:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
 80a0716:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a0718:	69e1      	ldr	r1, [r4, #28]
 80a071a:	1c58      	adds	r0, r3, #1
 80a071c:	1212      	asrs	r2, r2, #8
 80a071e:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a0720:	69e1      	ldr	r1, [r4, #28]
 80a0722:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a0724:	1c9a      	adds	r2, r3, #2
 80a0726:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a0728:	3303      	adds	r3, #3
 80a072a:	4649      	mov	r1, r9
 80a072c:	4620      	mov	r0, r4
 80a072e:	69e2      	ldr	r2, [r4, #28]
 80a0730:	f7ff fe95 	bl	80a045e <_ZN4MQTT11writeStringEPKcPht>
 80a0734:	4603      	mov	r3, r0
            if (willTopic) {
 80a0736:	f1b8 0f00 	cmp.w	r8, #0
 80a073a:	d00b      	beq.n	80a0754 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x220>
                length = writeString(willTopic, buffer, length);
 80a073c:	4641      	mov	r1, r8
 80a073e:	69e2      	ldr	r2, [r4, #28]
 80a0740:	4620      	mov	r0, r4
 80a0742:	f7ff fe8c 	bl	80a045e <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a0746:	69e2      	ldr	r2, [r4, #28]
                length = writeString(willTopic, buffer, length);
 80a0748:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
 80a074a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80a074c:	4620      	mov	r0, r4
 80a074e:	f7ff fe86 	bl	80a045e <_ZN4MQTT11writeStringEPKcPht>
 80a0752:	4603      	mov	r3, r0
            if(user != NULL) {
 80a0754:	b167      	cbz	r7, 80a0770 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x23c>
                length = writeString(user,buffer,length);
 80a0756:	4639      	mov	r1, r7
 80a0758:	4620      	mov	r0, r4
 80a075a:	69e2      	ldr	r2, [r4, #28]
 80a075c:	f7ff fe7f 	bl	80a045e <_ZN4MQTT11writeStringEPKcPht>
 80a0760:	4603      	mov	r3, r0
                if(pass != NULL) {
 80a0762:	b12e      	cbz	r6, 80a0770 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x23c>
                    length = writeString(pass,buffer,length);
 80a0764:	4631      	mov	r1, r6
 80a0766:	4620      	mov	r0, r4
 80a0768:	69e2      	ldr	r2, [r4, #28]
 80a076a:	f7ff fe78 	bl	80a045e <_ZN4MQTT11writeStringEPKcPht>
 80a076e:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
 80a0770:	3b05      	subs	r3, #5
 80a0772:	2110      	movs	r1, #16
 80a0774:	69e2      	ldr	r2, [r4, #28]
 80a0776:	b29b      	uxth	r3, r3
 80a0778:	4620      	mov	r0, r4
 80a077a:	f7ff fe33 	bl	80a03e4 <_ZN4MQTT5writeEhPht>
 80a077e:	f000 f8a1 	bl	80a08c4 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0782:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            lastInActivity = lastOutActivity = millis();
 80a0786:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
            while (!_client.available()) {
 80a078a:	4620      	mov	r0, r4
 80a078c:	f000 fb88 	bl	80a0ea0 <_ZN9TCPClient9availableEv>
 80a0790:	2800      	cmp	r0, #0
 80a0792:	d141      	bne.n	80a0818 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x2e4>
 80a0794:	f000 f896 	bl	80a08c4 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0798:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a079a:	1ac0      	subs	r0, r0, r3
 80a079c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a079e:	4373      	muls	r3, r6
 80a07a0:	4298      	cmp	r0, r3
 80a07a2:	d9f2      	bls.n	80a078a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x256>
                    _client.stop();
 80a07a4:	4620      	mov	r0, r4
 80a07a6:	f000 fbb5 	bl	80a0f14 <_ZN9TCPClient4stopEv>
                    Serial.println("Error in !_client.available()");
 80a07aa:	f000 ff2f 	bl	80a160c <_Z16_fetch_usbserialv>
 80a07ae:	4935      	ldr	r1, [pc, #212]	; (80a0884 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x350>)
 80a07b0:	f000 fd4e 	bl	80a1250 <_ZN5Print7printlnEPKc>
        MutexLocker lock(this);
 80a07b4:	a805      	add	r0, sp, #20
 80a07b6:	f7ff fd4a 	bl	80a024e <_ZN4MQTT11MutexLockerD1Ev>
}
 80a07ba:	4628      	mov	r0, r5
 80a07bc:	b013      	add	sp, #76	; 0x4c
 80a07be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            result = _client.connect(this->ip, this->port);
 80a07c2:	a80c      	add	r0, sp, #48	; 0x30
 80a07c4:	f000 feac 	bl	80a1520 <_ZN9IPAddressC1EPKh>
 80a07c8:	462b      	mov	r3, r5
 80a07ca:	4620      	mov	r0, r4
 80a07cc:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a07d0:	a90c      	add	r1, sp, #48	; 0x30
 80a07d2:	f000 faf5 	bl	80a0dc0 <_ZN9TCPClient7connectE9IPAddresstm>
 80a07d6:	e6ce      	b.n	80a0576 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x42>
                Serial.println("Failed using IPAddress");
 80a07d8:	f000 ff18 	bl	80a160c <_Z16_fetch_usbserialv>
 80a07dc:	492a      	ldr	r1, [pc, #168]	; (80a0888 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x354>)
 80a07de:	e6f0      	b.n	80a05c2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x8e>
            val = n;
 80a07e0:	4659      	mov	r1, fp
 80a07e2:	e753      	b.n	80a068c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a07e4:	4b29      	ldr	r3, [pc, #164]	; (80a088c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x358>)
 80a07e6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80a07ea:	6818      	ldr	r0, [r3, #0]
 80a07ec:	6859      	ldr	r1, [r3, #4]
 80a07ee:	7a1b      	ldrb	r3, [r3, #8]
 80a07f0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80a07f4:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a07f8:	ab0c      	add	r3, sp, #48	; 0x30
 80a07fa:	cb03      	ldmia	r3!, {r0, r1}
 80a07fc:	f8c2 0005 	str.w	r0, [r2, #5]
 80a0800:	f8c2 1009 	str.w	r1, [r2, #9]
 80a0804:	f89c 3000 	ldrb.w	r3, [ip]
 80a0808:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a080a:	230e      	movs	r3, #14
 80a080c:	e769      	b.n	80a06e2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
                v = 0x02;
 80a080e:	2002      	movs	r0, #2
 80a0810:	e775      	b.n	80a06fe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ca>
                    v = v|(0x80>>1);
 80a0812:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80a0816:	e77c      	b.n	80a0712 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1de>
            uint16_t len = readPacket(&llen);
 80a0818:	4620      	mov	r0, r4
 80a081a:	a90c      	add	r1, sp, #48	; 0x30
 80a081c:	f7ff fd82 	bl	80a0324 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
 80a0820:	2804      	cmp	r0, #4
 80a0822:	d110      	bne.n	80a0846 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x312>
                if (buffer[3] == CONN_ACCEPT) {
 80a0824:	69e3      	ldr	r3, [r4, #28]
 80a0826:	78dd      	ldrb	r5, [r3, #3]
 80a0828:	b935      	cbnz	r5, 80a0838 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x304>
 80a082a:	f000 f84b 	bl	80a08c4 <HAL_Timer_Get_Milli_Seconds>
                    pingOutstanding = false;
 80a082e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
                    lastInActivity = millis();
 80a0832:	62a0      	str	r0, [r4, #40]	; 0x28
                    return true;
 80a0834:	2501      	movs	r5, #1
 80a0836:	e7bd      	b.n	80a07b4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x280>
                    Serial.println(buffer[3]);
 80a0838:	f000 fee8 	bl	80a160c <_Z16_fetch_usbserialv>
 80a083c:	69e3      	ldr	r3, [r4, #28]
 80a083e:	220a      	movs	r2, #10
 80a0840:	78d9      	ldrb	r1, [r3, #3]
 80a0842:	f7ff fe67 	bl	80a0514 <_ZN5Print7printlnIhLi0EEEjT_i>
        _client.stop();
 80a0846:	4620      	mov	r0, r4
 80a0848:	f000 fb64 	bl	80a0f14 <_ZN9TCPClient4stopEv>
        MutexLocker lock(this);
 80a084c:	a805      	add	r0, sp, #20
 80a084e:	f7ff fcfe 	bl	80a024e <_ZN4MQTT11MutexLockerD1Ev>
    Serial.println("Error in isConnected()");
 80a0852:	f000 fedb 	bl	80a160c <_Z16_fetch_usbserialv>
 80a0856:	490e      	ldr	r1, [pc, #56]	; (80a0890 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x35c>)
 80a0858:	f000 fcfa 	bl	80a1250 <_ZN5Print7printlnEPKc>
    return false;
 80a085c:	2500      	movs	r5, #0
 80a085e:	e7ac      	b.n	80a07ba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x286>
 80a0860:	080a1f70 	.word	0x080a1f70
 80a0864:	080a1e0c 	.word	0x080a1e0c
 80a0868:	080a1e2b 	.word	0x080a1e2b
 80a086c:	080a1e4a 	.word	0x080a1e4a
 80a0870:	080a1e4e 	.word	0x080a1e4e
 80a0874:	080a1e54 	.word	0x080a1e54
 80a0878:	080a1e62 	.word	0x080a1e62
 80a087c:	080a1e75 	.word	0x080a1e75
 80a0880:	080a1ead 	.word	0x080a1ead
 80a0884:	080a1e78 	.word	0x080a1e78
 80a0888:	080a1e14 	.word	0x080a1e14
 80a088c:	080a1eb4 	.word	0x080a1eb4
 80a0890:	080a1e96 	.word	0x080a1e96

080a0894 <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
 80a0894:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
 80a0896:	f04f 0c04 	mov.w	ip, #4
 80a089a:	2401      	movs	r4, #1
bool MQTT::connect(const char *id, const char *user, const char *pass) {
 80a089c:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
 80a089e:	e9cd 4c04 	strd	r4, ip, [sp, #16]
 80a08a2:	2400      	movs	r4, #0
 80a08a4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80a08a8:	e9cd 4400 	strd	r4, r4, [sp]
 80a08ac:	f7ff fe42 	bl	80a0534 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a08b0:	b006      	add	sp, #24
 80a08b2:	bd10      	pop	{r4, pc}

080a08b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a08b4:	b508      	push	{r3, lr}
 80a08b6:	4b02      	ldr	r3, [pc, #8]	; (80a08c0 <HAL_RNG_GetRandomNumber+0xc>)
 80a08b8:	681b      	ldr	r3, [r3, #0]
 80a08ba:	685b      	ldr	r3, [r3, #4]
 80a08bc:	9301      	str	r3, [sp, #4]
 80a08be:	bd08      	pop	{r3, pc}
 80a08c0:	0806019c 	.word	0x0806019c

080a08c4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a08c4:	b508      	push	{r3, lr}
 80a08c6:	4b02      	ldr	r3, [pc, #8]	; (80a08d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a08c8:	681b      	ldr	r3, [r3, #0]
 80a08ca:	695b      	ldr	r3, [r3, #20]
 80a08cc:	9301      	str	r3, [sp, #4]
 80a08ce:	bd08      	pop	{r3, pc}
 80a08d0:	0806019c 	.word	0x0806019c

080a08d4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a08d4:	b508      	push	{r3, lr}
 80a08d6:	4b02      	ldr	r3, [pc, #8]	; (80a08e0 <os_mutex_create+0xc>)
 80a08d8:	681b      	ldr	r3, [r3, #0]
 80a08da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a08dc:	9301      	str	r3, [sp, #4]
 80a08de:	bd08      	pop	{r3, pc}
 80a08e0:	080601d0 	.word	0x080601d0

080a08e4 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 80a08e4:	b508      	push	{r3, lr}
 80a08e6:	4b02      	ldr	r3, [pc, #8]	; (80a08f0 <os_mutex_lock+0xc>)
 80a08e8:	681b      	ldr	r3, [r3, #0]
 80a08ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a08ec:	9301      	str	r3, [sp, #4]
 80a08ee:	bd08      	pop	{r3, pc}
 80a08f0:	080601d0 	.word	0x080601d0

080a08f4 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 80a08f4:	b508      	push	{r3, lr}
 80a08f6:	4b02      	ldr	r3, [pc, #8]	; (80a0900 <os_mutex_unlock+0xc>)
 80a08f8:	681b      	ldr	r3, [r3, #0]
 80a08fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a08fc:	9301      	str	r3, [sp, #4]
 80a08fe:	bd08      	pop	{r3, pc}
 80a0900:	080601d0 	.word	0x080601d0

080a0904 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0904:	b508      	push	{r3, lr}
 80a0906:	4b02      	ldr	r3, [pc, #8]	; (80a0910 <hal_usart_init+0xc>)
 80a0908:	681b      	ldr	r3, [r3, #0]
 80a090a:	699b      	ldr	r3, [r3, #24]
 80a090c:	9301      	str	r3, [sp, #4]
 80a090e:	bd08      	pop	{r3, pc}
 80a0910:	080601c4 	.word	0x080601c4

080a0914 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0914:	b508      	push	{r3, lr}
 80a0916:	4b02      	ldr	r3, [pc, #8]	; (80a0920 <hal_usart_write+0xc>)
 80a0918:	681b      	ldr	r3, [r3, #0]
 80a091a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a091c:	9301      	str	r3, [sp, #4]
 80a091e:	bd08      	pop	{r3, pc}
 80a0920:	080601c4 	.word	0x080601c4

080a0924 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0924:	b508      	push	{r3, lr}
 80a0926:	4b02      	ldr	r3, [pc, #8]	; (80a0930 <hal_usart_available+0xc>)
 80a0928:	681b      	ldr	r3, [r3, #0]
 80a092a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a092c:	9301      	str	r3, [sp, #4]
 80a092e:	bd08      	pop	{r3, pc}
 80a0930:	080601c4 	.word	0x080601c4

080a0934 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0934:	b508      	push	{r3, lr}
 80a0936:	4b02      	ldr	r3, [pc, #8]	; (80a0940 <hal_usart_read+0xc>)
 80a0938:	681b      	ldr	r3, [r3, #0]
 80a093a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a093c:	9301      	str	r3, [sp, #4]
 80a093e:	bd08      	pop	{r3, pc}
 80a0940:	080601c4 	.word	0x080601c4

080a0944 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a0944:	b508      	push	{r3, lr}
 80a0946:	4b02      	ldr	r3, [pc, #8]	; (80a0950 <hal_usart_peek+0xc>)
 80a0948:	681b      	ldr	r3, [r3, #0]
 80a094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a094c:	9301      	str	r3, [sp, #4]
 80a094e:	bd08      	pop	{r3, pc}
 80a0950:	080601c4 	.word	0x080601c4

080a0954 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a0954:	b508      	push	{r3, lr}
 80a0956:	4b02      	ldr	r3, [pc, #8]	; (80a0960 <hal_usart_flush+0xc>)
 80a0958:	681b      	ldr	r3, [r3, #0]
 80a095a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a095c:	9301      	str	r3, [sp, #4]
 80a095e:	bd08      	pop	{r3, pc}
 80a0960:	080601c4 	.word	0x080601c4

080a0964 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0964:	b508      	push	{r3, lr}
 80a0966:	4b02      	ldr	r3, [pc, #8]	; (80a0970 <hal_usart_available_data_for_write+0xc>)
 80a0968:	681b      	ldr	r3, [r3, #0]
 80a096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a096c:	9301      	str	r3, [sp, #4]
 80a096e:	bd08      	pop	{r3, pc}
 80a0970:	080601c4 	.word	0x080601c4

080a0974 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a0974:	b508      	push	{r3, lr}
 80a0976:	4b02      	ldr	r3, [pc, #8]	; (80a0980 <socket_active_status+0xc>)
 80a0978:	681b      	ldr	r3, [r3, #0]
 80a097a:	681b      	ldr	r3, [r3, #0]
 80a097c:	9301      	str	r3, [sp, #4]
 80a097e:	bd08      	pop	{r3, pc}
 80a0980:	080601bc 	.word	0x080601bc

080a0984 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0984:	b508      	push	{r3, lr}
 80a0986:	4b02      	ldr	r3, [pc, #8]	; (80a0990 <socket_handle_valid+0xc>)
 80a0988:	681b      	ldr	r3, [r3, #0]
 80a098a:	685b      	ldr	r3, [r3, #4]
 80a098c:	9301      	str	r3, [sp, #4]
 80a098e:	bd08      	pop	{r3, pc}
 80a0990:	080601bc 	.word	0x080601bc

080a0994 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0994:	b508      	push	{r3, lr}
 80a0996:	4b02      	ldr	r3, [pc, #8]	; (80a09a0 <socket_create+0xc>)
 80a0998:	681b      	ldr	r3, [r3, #0]
 80a099a:	689b      	ldr	r3, [r3, #8]
 80a099c:	9301      	str	r3, [sp, #4]
 80a099e:	bd08      	pop	{r3, pc}
 80a09a0:	080601bc 	.word	0x080601bc

080a09a4 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a09a4:	b508      	push	{r3, lr}
 80a09a6:	4b02      	ldr	r3, [pc, #8]	; (80a09b0 <socket_connect+0xc>)
 80a09a8:	681b      	ldr	r3, [r3, #0]
 80a09aa:	68db      	ldr	r3, [r3, #12]
 80a09ac:	9301      	str	r3, [sp, #4]
 80a09ae:	bd08      	pop	{r3, pc}
 80a09b0:	080601bc 	.word	0x080601bc

080a09b4 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a09b4:	b508      	push	{r3, lr}
 80a09b6:	4b02      	ldr	r3, [pc, #8]	; (80a09c0 <socket_receive+0xc>)
 80a09b8:	681b      	ldr	r3, [r3, #0]
 80a09ba:	691b      	ldr	r3, [r3, #16]
 80a09bc:	9301      	str	r3, [sp, #4]
 80a09be:	bd08      	pop	{r3, pc}
 80a09c0:	080601bc 	.word	0x080601bc

080a09c4 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a09c4:	b508      	push	{r3, lr}
 80a09c6:	4b02      	ldr	r3, [pc, #8]	; (80a09d0 <socket_close+0xc>)
 80a09c8:	681b      	ldr	r3, [r3, #0]
 80a09ca:	6a1b      	ldr	r3, [r3, #32]
 80a09cc:	9301      	str	r3, [sp, #4]
 80a09ce:	bd08      	pop	{r3, pc}
 80a09d0:	080601bc 	.word	0x080601bc

080a09d4 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a09d4:	b508      	push	{r3, lr}
 80a09d6:	4b02      	ldr	r3, [pc, #8]	; (80a09e0 <socket_handle_invalid+0xc>)
 80a09d8:	681b      	ldr	r3, [r3, #0]
 80a09da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a09dc:	9301      	str	r3, [sp, #4]
 80a09de:	bd08      	pop	{r3, pc}
 80a09e0:	080601bc 	.word	0x080601bc

080a09e4 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a09e4:	b508      	push	{r3, lr}
 80a09e6:	4b02      	ldr	r3, [pc, #8]	; (80a09f0 <socket_send_ex+0xc>)
 80a09e8:	681b      	ldr	r3, [r3, #0]
 80a09ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a09ec:	9301      	str	r3, [sp, #4]
 80a09ee:	bd08      	pop	{r3, pc}
 80a09f0:	080601bc 	.word	0x080601bc

080a09f4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a09f4:	b508      	push	{r3, lr}
 80a09f6:	4b02      	ldr	r3, [pc, #8]	; (80a0a00 <HAL_USB_USART_Init+0xc>)
 80a09f8:	681b      	ldr	r3, [r3, #0]
 80a09fa:	681b      	ldr	r3, [r3, #0]
 80a09fc:	9301      	str	r3, [sp, #4]
 80a09fe:	bd08      	pop	{r3, pc}
 80a0a00:	080601d8 	.word	0x080601d8

080a0a04 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0a04:	b508      	push	{r3, lr}
 80a0a06:	4b02      	ldr	r3, [pc, #8]	; (80a0a10 <HAL_USB_USART_Begin+0xc>)
 80a0a08:	681b      	ldr	r3, [r3, #0]
 80a0a0a:	685b      	ldr	r3, [r3, #4]
 80a0a0c:	9301      	str	r3, [sp, #4]
 80a0a0e:	bd08      	pop	{r3, pc}
 80a0a10:	080601d8 	.word	0x080601d8

080a0a14 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0a14:	b508      	push	{r3, lr}
 80a0a16:	4b02      	ldr	r3, [pc, #8]	; (80a0a20 <HAL_USB_USART_Available_Data+0xc>)
 80a0a18:	681b      	ldr	r3, [r3, #0]
 80a0a1a:	691b      	ldr	r3, [r3, #16]
 80a0a1c:	9301      	str	r3, [sp, #4]
 80a0a1e:	bd08      	pop	{r3, pc}
 80a0a20:	080601d8 	.word	0x080601d8

080a0a24 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0a24:	b508      	push	{r3, lr}
 80a0a26:	4b02      	ldr	r3, [pc, #8]	; (80a0a30 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0a28:	681b      	ldr	r3, [r3, #0]
 80a0a2a:	695b      	ldr	r3, [r3, #20]
 80a0a2c:	9301      	str	r3, [sp, #4]
 80a0a2e:	bd08      	pop	{r3, pc}
 80a0a30:	080601d8 	.word	0x080601d8

080a0a34 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0a34:	b508      	push	{r3, lr}
 80a0a36:	4b02      	ldr	r3, [pc, #8]	; (80a0a40 <HAL_USB_USART_Receive_Data+0xc>)
 80a0a38:	681b      	ldr	r3, [r3, #0]
 80a0a3a:	699b      	ldr	r3, [r3, #24]
 80a0a3c:	9301      	str	r3, [sp, #4]
 80a0a3e:	bd08      	pop	{r3, pc}
 80a0a40:	080601d8 	.word	0x080601d8

080a0a44 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0a44:	b508      	push	{r3, lr}
 80a0a46:	4b02      	ldr	r3, [pc, #8]	; (80a0a50 <HAL_USB_USART_Send_Data+0xc>)
 80a0a48:	681b      	ldr	r3, [r3, #0]
 80a0a4a:	69db      	ldr	r3, [r3, #28]
 80a0a4c:	9301      	str	r3, [sp, #4]
 80a0a4e:	bd08      	pop	{r3, pc}
 80a0a50:	080601d8 	.word	0x080601d8

080a0a54 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0a54:	b508      	push	{r3, lr}
 80a0a56:	4b02      	ldr	r3, [pc, #8]	; (80a0a60 <HAL_USB_USART_Flush_Data+0xc>)
 80a0a58:	681b      	ldr	r3, [r3, #0]
 80a0a5a:	6a1b      	ldr	r3, [r3, #32]
 80a0a5c:	9301      	str	r3, [sp, #4]
 80a0a5e:	bd08      	pop	{r3, pc}
 80a0a60:	080601d8 	.word	0x080601d8

080a0a64 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a0a64:	b508      	push	{r3, lr}
 80a0a66:	4b02      	ldr	r3, [pc, #8]	; (80a0a70 <HAL_NET_SetNetWatchDog+0xc>)
 80a0a68:	681b      	ldr	r3, [r3, #0]
 80a0a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0a6c:	9301      	str	r3, [sp, #4]
 80a0a6e:	bd08      	pop	{r3, pc}
 80a0a70:	080601c0 	.word	0x080601c0

080a0a74 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0a74:	b508      	push	{r3, lr}
 80a0a76:	4b02      	ldr	r3, [pc, #8]	; (80a0a80 <inet_gethostbyname+0xc>)
 80a0a78:	681b      	ldr	r3, [r3, #0]
 80a0a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0a7c:	9301      	str	r3, [sp, #4]
 80a0a7e:	bd08      	pop	{r3, pc}
 80a0a80:	080601c0 	.word	0x080601c0

080a0a84 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a0a84:	b508      	push	{r3, lr}
 80a0a86:	4b02      	ldr	r3, [pc, #8]	; (80a0a90 <log_message+0xc>)
 80a0a88:	681b      	ldr	r3, [r3, #0]
 80a0a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a0a8c:	9301      	str	r3, [sp, #4]
 80a0a8e:	bd08      	pop	{r3, pc}
 80a0a90:	080201a8 	.word	0x080201a8

080a0a94 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0a94:	b508      	push	{r3, lr}
 80a0a96:	4b02      	ldr	r3, [pc, #8]	; (80a0aa0 <set_system_mode+0xc>)
 80a0a98:	681b      	ldr	r3, [r3, #0]
 80a0a9a:	685b      	ldr	r3, [r3, #4]
 80a0a9c:	9301      	str	r3, [sp, #4]
 80a0a9e:	bd08      	pop	{r3, pc}
 80a0aa0:	080601a4 	.word	0x080601a4

080a0aa4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0aa4:	b508      	push	{r3, lr}
 80a0aa6:	4b02      	ldr	r3, [pc, #8]	; (80a0ab0 <system_delay_ms+0xc>)
 80a0aa8:	681b      	ldr	r3, [r3, #0]
 80a0aaa:	695b      	ldr	r3, [r3, #20]
 80a0aac:	9301      	str	r3, [sp, #4]
 80a0aae:	bd08      	pop	{r3, pc}
 80a0ab0:	080601a4 	.word	0x080601a4

080a0ab4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0ab4:	b508      	push	{r3, lr}
 80a0ab6:	4b03      	ldr	r3, [pc, #12]	; (80a0ac4 <system_ctrl_set_app_request_handler+0x10>)
 80a0ab8:	681b      	ldr	r3, [r3, #0]
 80a0aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0abe:	9301      	str	r3, [sp, #4]
 80a0ac0:	bd08      	pop	{r3, pc}
 80a0ac2:	0000      	.short	0x0000
 80a0ac4:	080601a4 	.word	0x080601a4

080a0ac8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0ac8:	b508      	push	{r3, lr}
 80a0aca:	4b03      	ldr	r3, [pc, #12]	; (80a0ad8 <system_ctrl_set_result+0x10>)
 80a0acc:	681b      	ldr	r3, [r3, #0]
 80a0ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0ad2:	9301      	str	r3, [sp, #4]
 80a0ad4:	bd08      	pop	{r3, pc}
 80a0ad6:	0000      	.short	0x0000
 80a0ad8:	080601a4 	.word	0x080601a4

080a0adc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0adc:	b508      	push	{r3, lr}
 80a0ade:	4b02      	ldr	r3, [pc, #8]	; (80a0ae8 <network_connect+0xc>)
 80a0ae0:	681b      	ldr	r3, [r3, #0]
 80a0ae2:	685b      	ldr	r3, [r3, #4]
 80a0ae4:	9301      	str	r3, [sp, #4]
 80a0ae6:	bd08      	pop	{r3, pc}
 80a0ae8:	080601c8 	.word	0x080601c8

080a0aec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0aec:	b508      	push	{r3, lr}
 80a0aee:	4b02      	ldr	r3, [pc, #8]	; (80a0af8 <network_connecting+0xc>)
 80a0af0:	681b      	ldr	r3, [r3, #0]
 80a0af2:	689b      	ldr	r3, [r3, #8]
 80a0af4:	9301      	str	r3, [sp, #4]
 80a0af6:	bd08      	pop	{r3, pc}
 80a0af8:	080601c8 	.word	0x080601c8

080a0afc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0afc:	b508      	push	{r3, lr}
 80a0afe:	4b02      	ldr	r3, [pc, #8]	; (80a0b08 <network_disconnect+0xc>)
 80a0b00:	681b      	ldr	r3, [r3, #0]
 80a0b02:	68db      	ldr	r3, [r3, #12]
 80a0b04:	9301      	str	r3, [sp, #4]
 80a0b06:	bd08      	pop	{r3, pc}
 80a0b08:	080601c8 	.word	0x080601c8

080a0b0c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0b0c:	b508      	push	{r3, lr}
 80a0b0e:	4b02      	ldr	r3, [pc, #8]	; (80a0b18 <network_ready+0xc>)
 80a0b10:	681b      	ldr	r3, [r3, #0]
 80a0b12:	691b      	ldr	r3, [r3, #16]
 80a0b14:	9301      	str	r3, [sp, #4]
 80a0b16:	bd08      	pop	{r3, pc}
 80a0b18:	080601c8 	.word	0x080601c8

080a0b1c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b1c:	b508      	push	{r3, lr}
 80a0b1e:	4b02      	ldr	r3, [pc, #8]	; (80a0b28 <network_on+0xc>)
 80a0b20:	681b      	ldr	r3, [r3, #0]
 80a0b22:	695b      	ldr	r3, [r3, #20]
 80a0b24:	9301      	str	r3, [sp, #4]
 80a0b26:	bd08      	pop	{r3, pc}
 80a0b28:	080601c8 	.word	0x080601c8

080a0b2c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b2c:	b508      	push	{r3, lr}
 80a0b2e:	4b02      	ldr	r3, [pc, #8]	; (80a0b38 <network_off+0xc>)
 80a0b30:	681b      	ldr	r3, [r3, #0]
 80a0b32:	699b      	ldr	r3, [r3, #24]
 80a0b34:	9301      	str	r3, [sp, #4]
 80a0b36:	bd08      	pop	{r3, pc}
 80a0b38:	080601c8 	.word	0x080601c8

080a0b3c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0b3c:	b508      	push	{r3, lr}
 80a0b3e:	4b02      	ldr	r3, [pc, #8]	; (80a0b48 <network_listen+0xc>)
 80a0b40:	681b      	ldr	r3, [r3, #0]
 80a0b42:	69db      	ldr	r3, [r3, #28]
 80a0b44:	9301      	str	r3, [sp, #4]
 80a0b46:	bd08      	pop	{r3, pc}
 80a0b48:	080601c8 	.word	0x080601c8

080a0b4c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0b4c:	b508      	push	{r3, lr}
 80a0b4e:	4b02      	ldr	r3, [pc, #8]	; (80a0b58 <network_listening+0xc>)
 80a0b50:	681b      	ldr	r3, [r3, #0]
 80a0b52:	6a1b      	ldr	r3, [r3, #32]
 80a0b54:	9301      	str	r3, [sp, #4]
 80a0b56:	bd08      	pop	{r3, pc}
 80a0b58:	080601c8 	.word	0x080601c8

080a0b5c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0b5c:	b508      	push	{r3, lr}
 80a0b5e:	4b02      	ldr	r3, [pc, #8]	; (80a0b68 <network_set_listen_timeout+0xc>)
 80a0b60:	681b      	ldr	r3, [r3, #0]
 80a0b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0b64:	9301      	str	r3, [sp, #4]
 80a0b66:	bd08      	pop	{r3, pc}
 80a0b68:	080601c8 	.word	0x080601c8

080a0b6c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0b6c:	b508      	push	{r3, lr}
 80a0b6e:	4b02      	ldr	r3, [pc, #8]	; (80a0b78 <network_get_listen_timeout+0xc>)
 80a0b70:	681b      	ldr	r3, [r3, #0]
 80a0b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0b74:	9301      	str	r3, [sp, #4]
 80a0b76:	bd08      	pop	{r3, pc}
 80a0b78:	080601c8 	.word	0x080601c8

080a0b7c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0b7c:	b508      	push	{r3, lr}
 80a0b7e:	4b02      	ldr	r3, [pc, #8]	; (80a0b88 <network_is_on+0xc>)
 80a0b80:	681b      	ldr	r3, [r3, #0]
 80a0b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0b84:	9301      	str	r3, [sp, #4]
 80a0b86:	bd08      	pop	{r3, pc}
 80a0b88:	080601c8 	.word	0x080601c8

080a0b8c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0b8c:	b508      	push	{r3, lr}
 80a0b8e:	4b02      	ldr	r3, [pc, #8]	; (80a0b98 <network_is_off+0xc>)
 80a0b90:	681b      	ldr	r3, [r3, #0]
 80a0b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0b94:	9301      	str	r3, [sp, #4]
 80a0b96:	bd08      	pop	{r3, pc}
 80a0b98:	080601c8 	.word	0x080601c8

080a0b9c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0b9c:	b508      	push	{r3, lr}
 80a0b9e:	4b02      	ldr	r3, [pc, #8]	; (80a0ba8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0ba0:	681b      	ldr	r3, [r3, #0]
 80a0ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0ba4:	9301      	str	r3, [sp, #4]
 80a0ba6:	bd08      	pop	{r3, pc}
 80a0ba8:	080601cc 	.word	0x080601cc

080a0bac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0bac:	b508      	push	{r3, lr}
 80a0bae:	4b02      	ldr	r3, [pc, #8]	; (80a0bb8 <malloc+0xc>)
 80a0bb0:	681b      	ldr	r3, [r3, #0]
 80a0bb2:	681b      	ldr	r3, [r3, #0]
 80a0bb4:	9301      	str	r3, [sp, #4]
 80a0bb6:	bd08      	pop	{r3, pc}
 80a0bb8:	080601a0 	.word	0x080601a0

080a0bbc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0bbc:	b508      	push	{r3, lr}
 80a0bbe:	4b02      	ldr	r3, [pc, #8]	; (80a0bc8 <free+0xc>)
 80a0bc0:	681b      	ldr	r3, [r3, #0]
 80a0bc2:	685b      	ldr	r3, [r3, #4]
 80a0bc4:	9301      	str	r3, [sp, #4]
 80a0bc6:	bd08      	pop	{r3, pc}
 80a0bc8:	080601a0 	.word	0x080601a0

080a0bcc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0bcc:	b508      	push	{r3, lr}
 80a0bce:	4b02      	ldr	r3, [pc, #8]	; (80a0bd8 <realloc+0xc>)
 80a0bd0:	681b      	ldr	r3, [r3, #0]
 80a0bd2:	689b      	ldr	r3, [r3, #8]
 80a0bd4:	9301      	str	r3, [sp, #4]
 80a0bd6:	bd08      	pop	{r3, pc}
 80a0bd8:	080601a0 	.word	0x080601a0

080a0bdc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0bdc:	b508      	push	{r3, lr}
 80a0bde:	4b02      	ldr	r3, [pc, #8]	; (80a0be8 <newlib_impure_ptr_callback+0xc>)
 80a0be0:	681b      	ldr	r3, [r3, #0]
 80a0be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0be4:	9301      	str	r3, [sp, #4]
 80a0be6:	bd08      	pop	{r3, pc}
 80a0be8:	080601a0 	.word	0x080601a0

080a0bec <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0bec:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0bee:	2000      	movs	r0, #0
 80a0bf0:	4b04      	ldr	r3, [pc, #16]	; (80a0c04 <_GLOBAL__sub_I_System+0x18>)
 80a0bf2:	601a      	str	r2, [r3, #0]
 80a0bf4:	4b04      	ldr	r3, [pc, #16]	; (80a0c08 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a0bf6:	4a05      	ldr	r2, [pc, #20]	; (80a0c0c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a0bf8:	6018      	str	r0, [r3, #0]
 80a0bfa:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a0bfc:	7198      	strb	r0, [r3, #6]
 80a0bfe:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0c00:	f7ff bf48 	b.w	80a0a94 <set_system_mode>
 80a0c04:	20000120 	.word	0x20000120
 80a0c08:	20000114 	.word	0x20000114
 80a0c0c:	ffff0000 	.word	0xffff0000

080a0c10 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a0c10:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0c12:	6803      	ldr	r3, [r0, #0]
{
 80a0c14:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0c18:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a0c1a:	2201      	movs	r2, #1
 80a0c1c:	f247 5330 	movw	r3, #30000	; 0x7530
 80a0c20:	f10d 0107 	add.w	r1, sp, #7
 80a0c24:	47a0      	blx	r4
}
 80a0c26:	b002      	add	sp, #8
 80a0c28:	bd10      	pop	{r4, pc}

080a0c2a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a0c2a:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0c2c:	6803      	ldr	r3, [r0, #0]
 80a0c2e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a0c30:	f247 5330 	movw	r3, #30000	; 0x7530
 80a0c34:	46a4      	mov	ip, r4
}
 80a0c36:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0c38:	4760      	bx	ip

080a0c3a <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a0c3a:	b513      	push	{r0, r1, r4, lr}
 80a0c3c:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a0c3e:	6802      	ldr	r2, [r0, #0]
{
 80a0c40:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a0c44:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a0c46:	f10d 0107 	add.w	r1, sp, #7
 80a0c4a:	2201      	movs	r2, #1
 80a0c4c:	47a0      	blx	r4
}
 80a0c4e:	b002      	add	sp, #8
 80a0c50:	bd10      	pop	{r4, pc}

080a0c52 <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a0c52:	4770      	bx	lr

080a0c54 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
 80a0c54:	4770      	bx	lr
	...

080a0c58 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      friend class __shared_count<_Lp>; // To be able to call _M_ptr().

      // No longer used, but code compiled against old libstdc++ headers
      // might still call it from __shared_ptr ctor to get the pointer out.
      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a0c58:	b510      	push	{r4, lr}
 80a0c5a:	4604      	mov	r4, r0
	// Check for the fake type_info first, so we don't try to access it
	// as a real type_info object. Otherwise, check if it's the real
	// type_info for this class. With RTTI enabled we can check directly,
	// or call a library function to do it.
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
	    ||
 80a0c5c:	4b06      	ldr	r3, [pc, #24]	; (80a0c78 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a0c5e:	4608      	mov	r0, r1
	    ||
 80a0c60:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a0c62:	f104 040c 	add.w	r4, r4, #12
 80a0c66:	d004      	beq.n	80a0c72 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
#if __cpp_rtti
	    __ti == typeid(_Sp_make_shared_tag)
#else
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a0c68:	f000 fe88 	bl	80a197c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a0c6c:	2800      	cmp	r0, #0
#endif
	   )
	  return __ptr;
	return nullptr;
 80a0c6e:	bf08      	it	eq
 80a0c70:	2400      	moveq	r4, #0
      }
 80a0c72:	4620      	mov	r0, r4
 80a0c74:	bd10      	pop	{r4, pc}
 80a0c76:	bf00      	nop
 80a0c78:	080a1ef4 	.word	0x080a1ef4

080a0c7c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a0c7c:	b510      	push	{r4, lr}
 80a0c7e:	4604      	mov	r4, r0
 80a0c80:	21ac      	movs	r1, #172	; 0xac
 80a0c82:	f000 fe79 	bl	80a1978 <_ZdlPvj>
 80a0c86:	4620      	mov	r0, r4
 80a0c88:	bd10      	pop	{r4, pc}

080a0c8a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a0c8a:	f7ff ba08 	b.w	80a009e <_ZdlPv>
	...

080a0c90 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0c90:	b538      	push	{r3, r4, r5, lr}
 80a0c92:	4b0b      	ldr	r3, [pc, #44]	; (80a0cc0 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0c94:	6984      	ldr	r4, [r0, #24]
 80a0c96:	4605      	mov	r5, r0
 80a0c98:	6003      	str	r3, [r0, #0]
 80a0c9a:	b17c      	cbz	r4, 80a0cbc <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a0c9c:	6863      	ldr	r3, [r4, #4]
 80a0c9e:	3b01      	subs	r3, #1
 80a0ca0:	6063      	str	r3, [r4, #4]
 80a0ca2:	b95b      	cbnz	r3, 80a0cbc <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a0ca4:	6823      	ldr	r3, [r4, #0]
 80a0ca6:	4620      	mov	r0, r4
 80a0ca8:	689b      	ldr	r3, [r3, #8]
 80a0caa:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0cac:	68a3      	ldr	r3, [r4, #8]
 80a0cae:	3b01      	subs	r3, #1
 80a0cb0:	60a3      	str	r3, [r4, #8]
 80a0cb2:	b91b      	cbnz	r3, 80a0cbc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a0cb4:	6823      	ldr	r3, [r4, #0]
 80a0cb6:	4620      	mov	r0, r4
 80a0cb8:	68db      	ldr	r3, [r3, #12]
 80a0cba:	4798      	blx	r3
 80a0cbc:	4628      	mov	r0, r5
 80a0cbe:	bd38      	pop	{r3, r4, r5, pc}
 80a0cc0:	080a1f04 	.word	0x080a1f04

080a0cc4 <_ZN9TCPClientD0Ev>:
 80a0cc4:	b510      	push	{r4, lr}
 80a0cc6:	4604      	mov	r4, r0
 80a0cc8:	f7ff ffe2 	bl	80a0c90 <_ZN9TCPClientD1Ev>
 80a0ccc:	4620      	mov	r0, r4
 80a0cce:	211c      	movs	r1, #28
 80a0cd0:	f000 fe52 	bl	80a1978 <_ZdlPvj>
 80a0cd4:	4620      	mov	r0, r4
 80a0cd6:	bd10      	pop	{r4, pc}

080a0cd8 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a0cd8:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0cda:	4604      	mov	r4, r0
 80a0cdc:	4606      	mov	r6, r0
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a0cde:	694d      	ldr	r5, [r1, #20]
 80a0ce0:	4b04      	ldr	r3, [pc, #16]	; (80a0cf4 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a0ce2:	358c      	adds	r5, #140	; 0x8c
 80a0ce4:	f844 3b04 	str.w	r3, [r4], #4
 80a0ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0cec:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a0cee:	4630      	mov	r0, r6
 80a0cf0:	7023      	strb	r3, [r4, #0]
 80a0cf2:	bd70      	pop	{r4, r5, r6, pc}
 80a0cf4:	080a1f70 	.word	0x080a1f70

080a0cf8 <_ZN9TCPClient4peekEv>:
{
 80a0cf8:	b510      	push	{r4, lr}
 80a0cfa:	6943      	ldr	r3, [r0, #20]
 80a0cfc:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a0cfe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a0d02:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a0d06:	429a      	cmp	r2, r3
 80a0d08:	d005      	beq.n	80a0d16 <_ZN9TCPClient4peekEv+0x1e>
 80a0d0a:	6963      	ldr	r3, [r4, #20]
 80a0d0c:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a0d10:	4413      	add	r3, r2
 80a0d12:	7918      	ldrb	r0, [r3, #4]
}
 80a0d14:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a0d16:	6803      	ldr	r3, [r0, #0]
 80a0d18:	691b      	ldr	r3, [r3, #16]
 80a0d1a:	4798      	blx	r3
 80a0d1c:	2800      	cmp	r0, #0
 80a0d1e:	d1f4      	bne.n	80a0d0a <_ZN9TCPClient4peekEv+0x12>
 80a0d20:	f04f 30ff 	mov.w	r0, #4294967295
 80a0d24:	e7f6      	b.n	80a0d14 <_ZN9TCPClient4peekEv+0x1c>

080a0d26 <_ZN9TCPClient4readEv>:
{
 80a0d26:	b510      	push	{r4, lr}
 80a0d28:	6943      	ldr	r3, [r0, #20]
 80a0d2a:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a0d2c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a0d30:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a0d34:	429a      	cmp	r2, r3
 80a0d36:	d008      	beq.n	80a0d4a <_ZN9TCPClient4readEv+0x24>
 80a0d38:	6963      	ldr	r3, [r4, #20]
 80a0d3a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a0d3e:	1c51      	adds	r1, r2, #1
 80a0d40:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a0d44:	4413      	add	r3, r2
 80a0d46:	7918      	ldrb	r0, [r3, #4]
}
 80a0d48:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a0d4a:	6803      	ldr	r3, [r0, #0]
 80a0d4c:	691b      	ldr	r3, [r3, #16]
 80a0d4e:	4798      	blx	r3
 80a0d50:	2800      	cmp	r0, #0
 80a0d52:	d1f1      	bne.n	80a0d38 <_ZN9TCPClient4readEv+0x12>
 80a0d54:	f04f 30ff 	mov.w	r0, #4294967295
 80a0d58:	e7f6      	b.n	80a0d48 <_ZN9TCPClient4readEv+0x22>

080a0d5a <_ZN9TCPClient4readEPhj>:
{
 80a0d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d5c:	6943      	ldr	r3, [r0, #20]
 80a0d5e:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a0d60:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a0d64:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a0d68:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a0d6a:	429a      	cmp	r2, r3
{
 80a0d6c:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a0d6e:	d016      	beq.n	80a0d9e <_ZN9TCPClient4readEPhj+0x44>
 80a0d70:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a0d72:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a0d74:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a0d78:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a0d7c:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a0d7e:	42bc      	cmp	r4, r7
 80a0d80:	bf28      	it	cs
 80a0d82:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a0d84:	3304      	adds	r3, #4
 80a0d86:	4622      	mov	r2, r4
 80a0d88:	4419      	add	r1, r3
 80a0d8a:	f000 ff11 	bl	80a1bb0 <memcpy>
 80a0d8e:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a0d90:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a0d94:	4423      	add	r3, r4
 80a0d96:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a0d9a:	4620      	mov	r0, r4
 80a0d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a0d9e:	6803      	ldr	r3, [r0, #0]
 80a0da0:	691b      	ldr	r3, [r3, #16]
 80a0da2:	4798      	blx	r3
 80a0da4:	2800      	cmp	r0, #0
 80a0da6:	d1e3      	bne.n	80a0d70 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a0da8:	f04f 34ff 	mov.w	r4, #4294967295
 80a0dac:	e7f5      	b.n	80a0d9a <_ZN9TCPClient4readEPhj+0x40>

080a0dae <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a0dae:	2300      	movs	r3, #0
 80a0db0:	6942      	ldr	r2, [r0, #20]
 80a0db2:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a0db6:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a0db8:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a0dbc:	4770      	bx	lr
	...

080a0dc0 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a0dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0dc4:	461f      	mov	r7, r3
    stop();
 80a0dc6:	6803      	ldr	r3, [r0, #0]
{
 80a0dc8:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a0dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a0dcc:	4605      	mov	r5, r0
 80a0dce:	460c      	mov	r4, r1
 80a0dd0:	4616      	mov	r6, r2
    stop();
 80a0dd2:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a0dd4:	4638      	mov	r0, r7
 80a0dd6:	f000 fdab 	bl	80a1930 <_ZN5spark12NetworkClass4fromEm>
 80a0dda:	6803      	ldr	r3, [r0, #0]
 80a0ddc:	68db      	ldr	r3, [r3, #12]
 80a0dde:	4798      	blx	r3
 80a0de0:	2800      	cmp	r0, #0
 80a0de2:	d054      	beq.n	80a0e8e <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a0de4:	4633      	mov	r3, r6
 80a0de6:	2206      	movs	r2, #6
 80a0de8:	2101      	movs	r1, #1
 80a0dea:	2002      	movs	r0, #2
 80a0dec:	9700      	str	r7, [sp, #0]
 80a0dee:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a0df2:	f7ff fdcf 	bl	80a0994 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a0df6:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a0df8:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a0dfc:	f04f 0800 	mov.w	r8, #0
 80a0e00:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a0e04:	696b      	ldr	r3, [r5, #20]
 80a0e06:	2001      	movs	r0, #1
 80a0e08:	681b      	ldr	r3, [r3, #0]
 80a0e0a:	4923      	ldr	r1, [pc, #140]	; (80a0e98 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a0e0c:	9301      	str	r3, [sp, #4]
 80a0e0e:	4b23      	ldr	r3, [pc, #140]	; (80a0e9c <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a0e10:	aa02      	add	r2, sp, #8
 80a0e12:	9300      	str	r3, [sp, #0]
 80a0e14:	4643      	mov	r3, r8
 80a0e16:	f7ff fe35 	bl	80a0a84 <log_message>
          if (socket_handle_valid(d_->sock))
 80a0e1a:	696b      	ldr	r3, [r5, #20]
 80a0e1c:	6818      	ldr	r0, [r3, #0]
 80a0e1e:	f7ff fdb1 	bl	80a0984 <socket_handle_valid>
 80a0e22:	2800      	cmp	r0, #0
 80a0e24:	d033      	beq.n	80a0e8e <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a0e26:	4628      	mov	r0, r5
 80a0e28:	f7ff ffc1 	bl	80a0dae <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a0e2c:	2302      	movs	r3, #2
 80a0e2e:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a0e32:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a0e34:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a0e36:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a0e3a:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a0e3c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a0e40:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a0e44:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a0e46:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a0e4a:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a0e4e:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a0e52:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a0e56:	f7ff fe05 	bl	80a0a64 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a0e5a:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a0e5c:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a0e5e:	2210      	movs	r2, #16
 80a0e60:	6818      	ldr	r0, [r3, #0]
 80a0e62:	a902      	add	r1, sp, #8
 80a0e64:	f7ff fd9e 	bl	80a09a4 <socket_connect>
 80a0e68:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a0e6a:	4630      	mov	r0, r6
 80a0e6c:	f7ff fdfa 	bl	80a0a64 <HAL_NET_SetNetWatchDog>
 80a0e70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a0e72:	696e      	ldr	r6, [r5, #20]
 80a0e74:	368c      	adds	r6, #140	; 0x8c
 80a0e76:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a0e78:	6823      	ldr	r3, [r4, #0]
 80a0e7a:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a0e7c:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a0e7e:	f1b9 0f00 	cmp.w	r9, #0
 80a0e82:	d007      	beq.n	80a0e94 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a0e84:	682b      	ldr	r3, [r5, #0]
 80a0e86:	4628      	mov	r0, r5
 80a0e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0e8a:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a0e8c:	4640      	mov	r0, r8
}
 80a0e8e:	b00b      	add	sp, #44	; 0x2c
 80a0e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0e94:	2001      	movs	r0, #1
        return connected;
 80a0e96:	e7fa      	b.n	80a0e8e <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a0e98:	080a1ebd 	.word	0x080a1ebd
 80a0e9c:	080a1ec4 	.word	0x080a1ec4

080a0ea0 <_ZN9TCPClient9availableEv>:
{
 80a0ea0:	b538      	push	{r3, r4, r5, lr}
 80a0ea2:	6942      	ldr	r2, [r0, #20]
 80a0ea4:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a0ea6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a0eaa:	b12b      	cbz	r3, 80a0eb8 <_ZN9TCPClient9availableEv+0x18>
 80a0eac:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a0eb0:	429a      	cmp	r2, r3
 80a0eb2:	d101      	bne.n	80a0eb8 <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a0eb4:	f7ff ff7b 	bl	80a0dae <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a0eb8:	6920      	ldr	r0, [r4, #16]
 80a0eba:	f000 fd39 	bl	80a1930 <_ZN5spark12NetworkClass4fromEm>
 80a0ebe:	6803      	ldr	r3, [r0, #0]
 80a0ec0:	68db      	ldr	r3, [r3, #12]
 80a0ec2:	4798      	blx	r3
 80a0ec4:	b1f8      	cbz	r0, 80a0f06 <_ZN9TCPClient9availableEv+0x66>
 80a0ec6:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a0ec8:	6818      	ldr	r0, [r3, #0]
 80a0eca:	f7ff fd5b 	bl	80a0984 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a0ece:	b1d0      	cbz	r0, 80a0f06 <_ZN9TCPClient9availableEv+0x66>
 80a0ed0:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a0ed2:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a0ed6:	297f      	cmp	r1, #127	; 0x7f
 80a0ed8:	d815      	bhi.n	80a0f06 <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a0eda:	1d05      	adds	r5, r0, #4
 80a0edc:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a0ee0:	2300      	movs	r3, #0
 80a0ee2:	6800      	ldr	r0, [r0, #0]
 80a0ee4:	4429      	add	r1, r5
 80a0ee6:	f7ff fd65 	bl	80a09b4 <socket_receive>
            if (ret > 0)
 80a0eea:	2800      	cmp	r0, #0
 80a0eec:	dd0b      	ble.n	80a0f06 <_ZN9TCPClient9availableEv+0x66>
 80a0eee:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a0ef0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a0ef4:	b90a      	cbnz	r2, 80a0efa <_ZN9TCPClient9availableEv+0x5a>
 80a0ef6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a0efa:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a0efc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a0f00:	4410      	add	r0, r2
 80a0f02:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a0f06:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a0f08:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a0f0c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a0f10:	1ac0      	subs	r0, r0, r3
 80a0f12:	bd38      	pop	{r3, r4, r5, pc}

080a0f14 <_ZN9TCPClient4stopEv>:
{
 80a0f14:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a0f16:	6943      	ldr	r3, [r0, #20]
{
 80a0f18:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a0f1a:	6818      	ldr	r0, [r3, #0]
 80a0f1c:	f7ff fd32 	bl	80a0984 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a0f20:	b118      	cbz	r0, 80a0f2a <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a0f22:	6963      	ldr	r3, [r4, #20]
 80a0f24:	6818      	ldr	r0, [r3, #0]
 80a0f26:	f7ff fd4d 	bl	80a09c4 <socket_close>
 80a0f2a:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a0f2c:	f7ff fd52 	bl	80a09d4 <socket_handle_invalid>
 80a0f30:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0f32:	6960      	ldr	r0, [r4, #20]
 80a0f34:	2211      	movs	r2, #17
 80a0f36:	2100      	movs	r1, #0
 80a0f38:	308c      	adds	r0, #140	; 0x8c
 80a0f3a:	f000 fe47 	bl	80a1bcc <memset>
  flush_buffer();
 80a0f3e:	4620      	mov	r0, r4
}
 80a0f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a0f44:	f7ff bf33 	b.w	80a0dae <_ZN9TCPClient12flush_bufferEv>

080a0f48 <_ZN9TCPClient6statusEv>:
{
 80a0f48:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a0f4a:	6943      	ldr	r3, [r0, #20]
{
 80a0f4c:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a0f4e:	6818      	ldr	r0, [r3, #0]
 80a0f50:	f7ff fd18 	bl	80a0984 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a0f54:	b908      	cbnz	r0, 80a0f5a <_ZN9TCPClient6statusEv+0x12>
 80a0f56:	2000      	movs	r0, #0
}
 80a0f58:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a0f5a:	6920      	ldr	r0, [r4, #16]
 80a0f5c:	f000 fce8 	bl	80a1930 <_ZN5spark12NetworkClass4fromEm>
 80a0f60:	6803      	ldr	r3, [r0, #0]
 80a0f62:	68db      	ldr	r3, [r3, #12]
 80a0f64:	4798      	blx	r3
 80a0f66:	2800      	cmp	r0, #0
 80a0f68:	d0f5      	beq.n	80a0f56 <_ZN9TCPClient6statusEv+0xe>
 80a0f6a:	6963      	ldr	r3, [r4, #20]
 80a0f6c:	6818      	ldr	r0, [r3, #0]
 80a0f6e:	f7ff fd01 	bl	80a0974 <socket_active_status>
 80a0f72:	fab0 f080 	clz	r0, r0
 80a0f76:	0940      	lsrs	r0, r0, #5
 80a0f78:	e7ee      	b.n	80a0f58 <_ZN9TCPClient6statusEv+0x10>

080a0f7a <_ZN9TCPClientcvbEv>:
{
 80a0f7a:	b508      	push	{r3, lr}
   return (status()!=0);
 80a0f7c:	f7ff ffe4 	bl	80a0f48 <_ZN9TCPClient6statusEv>
}
 80a0f80:	3800      	subs	r0, #0
 80a0f82:	bf18      	it	ne
 80a0f84:	2001      	movne	r0, #1
 80a0f86:	bd08      	pop	{r3, pc}

080a0f88 <_ZN9TCPClient5writeEPKhjm>:
{
 80a0f88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a0f8c:	2700      	movs	r7, #0
 80a0f8e:	6047      	str	r7, [r0, #4]
 80a0f90:	4604      	mov	r4, r0
 80a0f92:	460d      	mov	r5, r1
 80a0f94:	4616      	mov	r6, r2
 80a0f96:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a0f98:	f7ff ffd6 	bl	80a0f48 <_ZN9TCPClient6statusEv>
 80a0f9c:	b170      	cbz	r0, 80a0fbc <_ZN9TCPClient5writeEPKhjm+0x34>
 80a0f9e:	e9cd 8700 	strd	r8, r7, [sp]
 80a0fa2:	6960      	ldr	r0, [r4, #20]
 80a0fa4:	463b      	mov	r3, r7
 80a0fa6:	4632      	mov	r2, r6
 80a0fa8:	4629      	mov	r1, r5
 80a0faa:	6800      	ldr	r0, [r0, #0]
 80a0fac:	f7ff fd1a 	bl	80a09e4 <socket_send_ex>
    if (ret < 0) {
 80a0fb0:	2800      	cmp	r0, #0
 80a0fb2:	da00      	bge.n	80a0fb6 <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a0fb4:	6060      	str	r0, [r4, #4]
}
 80a0fb6:	b002      	add	sp, #8
 80a0fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a0fbc:	f04f 30ff 	mov.w	r0, #4294967295
 80a0fc0:	e7f8      	b.n	80a0fb4 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a0fc2 <_ZN9TCPClient9connectedEv>:
{
 80a0fc2:	b570      	push	{r4, r5, r6, lr}
 80a0fc4:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a0fc6:	f7ff ffbf 	bl	80a0f48 <_ZN9TCPClient6statusEv>
 80a0fca:	b9e8      	cbnz	r0, 80a1008 <_ZN9TCPClient9connectedEv+0x46>
 80a0fcc:	696b      	ldr	r3, [r5, #20]
 80a0fce:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a0fd2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a0fd6:	4291      	cmp	r1, r2
 80a0fd8:	d116      	bne.n	80a1008 <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a0fda:	6818      	ldr	r0, [r3, #0]
 80a0fdc:	f7ff fcd2 	bl	80a0984 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a0fe0:	b908      	cbnz	r0, 80a0fe6 <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a0fe2:	2000      	movs	r0, #0
}
 80a0fe4:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a0fe6:	696b      	ldr	r3, [r5, #20]
 80a0fe8:	6818      	ldr	r0, [r3, #0]
 80a0fea:	f7ff fcc3 	bl	80a0974 <socket_active_status>
 80a0fee:	2801      	cmp	r0, #1
 80a0ff0:	4604      	mov	r4, r0
 80a0ff2:	d1f6      	bne.n	80a0fe2 <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a0ff4:	682b      	ldr	r3, [r5, #0]
 80a0ff6:	4628      	mov	r0, r5
 80a0ff8:	691b      	ldr	r3, [r3, #16]
 80a0ffa:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a0ffc:	b930      	cbnz	r0, 80a100c <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a0ffe:	682b      	ldr	r3, [r5, #0]
 80a1000:	4628      	mov	r0, r5
 80a1002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1004:	4798      	blx	r3
 80a1006:	e7ec      	b.n	80a0fe2 <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a1008:	2001      	movs	r0, #1
 80a100a:	e7eb      	b.n	80a0fe4 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a100c:	4620      	mov	r0, r4
 80a100e:	e7e9      	b.n	80a0fe4 <_ZN9TCPClient9connectedEv+0x22>

080a1010 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a1010:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a1012:	b510      	push	{r4, lr}
 80a1014:	4604      	mov	r4, r0
          total(0) {
 80a1016:	6001      	str	r1, [r0, #0]
 80a1018:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a101c:	3088      	adds	r0, #136	; 0x88
 80a101e:	f000 fa33 	bl	80a1488 <_ZN9IPAddressC1Ev>
}
 80a1022:	4620      	mov	r0, r4
 80a1024:	bd10      	pop	{r4, pc}
	...

080a1028 <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a1028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a102a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a102e:	2300      	movs	r3, #0
 80a1030:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a1034:	4a0d      	ldr	r2, [pc, #52]	; (80a106c <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a1036:	6103      	str	r3, [r0, #16]
 80a1038:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a103a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a103c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a103e:	20ac      	movs	r0, #172	; 0xac
 80a1040:	460e      	mov	r6, r1
 80a1042:	f7ff f828 	bl	80a0096 <_Znwj>
	  auto __pi = ::new (__mem)
 80a1046:	1e05      	subs	r5, r0, #0
 80a1048:	f105 070c 	add.w	r7, r5, #12
 80a104c:	d008      	beq.n	80a1060 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a104e:	2301      	movs	r3, #1
 80a1050:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a1054:	4b06      	ldr	r3, [pc, #24]	; (80a1070 <_ZN9TCPClientC1Em+0x48>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a1056:	4631      	mov	r1, r6
 80a1058:	4638      	mov	r0, r7
 80a105a:	602b      	str	r3, [r5, #0]
 80a105c:	f7ff ffd8 	bl	80a1010 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a1060:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a1062:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a1066:	f7ff fea2 	bl	80a0dae <_ZN9TCPClient12flush_bufferEv>
}
 80a106a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a106c:	080a1f04 	.word	0x080a1f04
 80a1070:	080a1ee0 	.word	0x080a1ee0

080a1074 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a1074:	b510      	push	{r4, lr}
 80a1076:	4604      	mov	r4, r0
 80a1078:	f7ff fcac 	bl	80a09d4 <socket_handle_invalid>
 80a107c:	4601      	mov	r1, r0
 80a107e:	4620      	mov	r0, r4
 80a1080:	f7ff ffd2 	bl	80a1028 <_ZN9TCPClientC1Em>
}
 80a1084:	4620      	mov	r0, r4
 80a1086:	bd10      	pop	{r4, pc}

080a1088 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a1088:	b510      	push	{r4, lr}
 80a108a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a108c:	6800      	ldr	r0, [r0, #0]
 80a108e:	f7ff fc79 	bl	80a0984 <socket_handle_valid>
 80a1092:	b110      	cbz	r0, 80a109a <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a1094:	6820      	ldr	r0, [r4, #0]
 80a1096:	f7ff fc95 	bl	80a09c4 <socket_close>
    }
}
 80a109a:	4620      	mov	r0, r4
 80a109c:	bd10      	pop	{r4, pc}

080a109e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a109e:	300c      	adds	r0, #12
 80a10a0:	f7ff bff2 	b.w	80a1088 <_ZN9TCPClient4DataD1Ev>

080a10a4 <_ZN9TCPClient7connectEPKctm>:
{
 80a10a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a10a8:	461f      	mov	r7, r3
    stop();
 80a10aa:	6803      	ldr	r3, [r0, #0]
{
 80a10ac:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a10ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a10b0:	4606      	mov	r6, r0
 80a10b2:	460d      	mov	r5, r1
 80a10b4:	4690      	mov	r8, r2
    stop();
 80a10b6:	4798      	blx	r3
    if (Network.ready())
 80a10b8:	4813      	ldr	r0, [pc, #76]	; (80a1108 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a10ba:	f000 fbe4 	bl	80a1886 <_ZN5spark12NetworkClass5readyEv>
 80a10be:	b1f0      	cbz	r0, 80a10fe <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a10c0:	a802      	add	r0, sp, #8
 80a10c2:	f000 f9e1 	bl	80a1488 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a10c6:	4628      	mov	r0, r5
 80a10c8:	f000 fdb6 	bl	80a1c38 <strlen>
 80a10cc:	2400      	movs	r4, #0
 80a10ce:	b281      	uxth	r1, r0
 80a10d0:	463b      	mov	r3, r7
 80a10d2:	4628      	mov	r0, r5
 80a10d4:	9400      	str	r4, [sp, #0]
 80a10d6:	aa03      	add	r2, sp, #12
 80a10d8:	f7ff fccc 	bl	80a0a74 <inet_gethostbyname>
 80a10dc:	b990      	cbnz	r0, 80a1104 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a10de:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a10e0:	ad09      	add	r5, sp, #36	; 0x24
 80a10e2:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a10e6:	4b09      	ldr	r3, [pc, #36]	; (80a110c <_ZN9TCPClient7connectEPKctm+0x68>)
 80a10e8:	ac03      	add	r4, sp, #12
 80a10ea:	9308      	str	r3, [sp, #32]
 80a10ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a10ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a10f0:	6823      	ldr	r3, [r4, #0]
 80a10f2:	4642      	mov	r2, r8
 80a10f4:	702b      	strb	r3, [r5, #0]
 80a10f6:	4630      	mov	r0, r6
 80a10f8:	463b      	mov	r3, r7
 80a10fa:	a908      	add	r1, sp, #32
 80a10fc:	47c8      	blx	r9
}
 80a10fe:	b00f      	add	sp, #60	; 0x3c
 80a1100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a1104:	4620      	mov	r0, r4
 80a1106:	e7fa      	b.n	80a10fe <_ZN9TCPClient7connectEPKctm+0x5a>
 80a1108:	200005a0 	.word	0x200005a0
 80a110c:	080a1f70 	.word	0x080a1f70

080a1110 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1110:	b510      	push	{r4, lr}
 80a1112:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1114:	6800      	ldr	r0, [r0, #0]
 80a1116:	b108      	cbz	r0, 80a111c <_ZN6String10invalidateEv+0xc>
 80a1118:	f7ff fd50 	bl	80a0bbc <free>
	buffer = NULL;
 80a111c:	2300      	movs	r3, #0
	capacity = len = 0;
 80a111e:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a1122:	6023      	str	r3, [r4, #0]
}
 80a1124:	bd10      	pop	{r4, pc}

080a1126 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1126:	b538      	push	{r3, r4, r5, lr}
 80a1128:	4604      	mov	r4, r0
 80a112a:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a112c:	6800      	ldr	r0, [r0, #0]
 80a112e:	3101      	adds	r1, #1
 80a1130:	f7ff fd4c 	bl	80a0bcc <realloc>
	if (newbuffer) {
 80a1134:	b110      	cbz	r0, 80a113c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1136:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a113a:	2001      	movs	r0, #1
	}
	return 0;
}
 80a113c:	bd38      	pop	{r3, r4, r5, pc}

080a113e <_ZN6String7reserveEj>:
{
 80a113e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1140:	6803      	ldr	r3, [r0, #0]
{
 80a1142:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1144:	b123      	cbz	r3, 80a1150 <_ZN6String7reserveEj+0x12>
 80a1146:	6843      	ldr	r3, [r0, #4]
 80a1148:	428b      	cmp	r3, r1
 80a114a:	d301      	bcc.n	80a1150 <_ZN6String7reserveEj+0x12>
 80a114c:	2001      	movs	r0, #1
}
 80a114e:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a1150:	4620      	mov	r0, r4
 80a1152:	f7ff ffe8 	bl	80a1126 <_ZN6String12changeBufferEj>
 80a1156:	2800      	cmp	r0, #0
 80a1158:	d0f9      	beq.n	80a114e <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a115a:	68a3      	ldr	r3, [r4, #8]
 80a115c:	2b00      	cmp	r3, #0
 80a115e:	d1f5      	bne.n	80a114c <_ZN6String7reserveEj+0xe>
 80a1160:	6822      	ldr	r2, [r4, #0]
 80a1162:	7013      	strb	r3, [r2, #0]
 80a1164:	e7f2      	b.n	80a114c <_ZN6String7reserveEj+0xe>

080a1166 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1166:	b570      	push	{r4, r5, r6, lr}
 80a1168:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a116a:	4611      	mov	r1, r2
{
 80a116c:	4604      	mov	r4, r0
 80a116e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1170:	f7ff ffe5 	bl	80a113e <_ZN6String7reserveEj>
 80a1174:	b920      	cbnz	r0, 80a1180 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a1176:	4620      	mov	r0, r4
 80a1178:	f7ff ffca 	bl	80a1110 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a117c:	4620      	mov	r0, r4
 80a117e:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a1180:	462a      	mov	r2, r5
 80a1182:	4631      	mov	r1, r6
 80a1184:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a1186:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1188:	f000 fd12 	bl	80a1bb0 <memcpy>
	buffer[len] = 0;
 80a118c:	2100      	movs	r1, #0
 80a118e:	6822      	ldr	r2, [r4, #0]
 80a1190:	68a3      	ldr	r3, [r4, #8]
 80a1192:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a1194:	e7f2      	b.n	80a117c <_ZN6String4copyEPKcj+0x16>

080a1196 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a1196:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a1198:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a119a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a119c:	460d      	mov	r5, r1
	capacity = 0;
 80a119e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a11a2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a11a4:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a11a6:	b139      	cbz	r1, 80a11b8 <_ZN6StringC1EPKc+0x22>
 80a11a8:	4608      	mov	r0, r1
 80a11aa:	f000 fd45 	bl	80a1c38 <strlen>
 80a11ae:	4629      	mov	r1, r5
 80a11b0:	4602      	mov	r2, r0
 80a11b2:	4620      	mov	r0, r4
 80a11b4:	f7ff ffd7 	bl	80a1166 <_ZN6String4copyEPKcj>
}
 80a11b8:	4620      	mov	r0, r4
 80a11ba:	bd38      	pop	{r3, r4, r5, pc}

080a11bc <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a11bc:	b538      	push	{r3, r4, r5, lr}
 80a11be:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a11c0:	460c      	mov	r4, r1
 80a11c2:	b149      	cbz	r1, 80a11d8 <_ZN6StringaSEPKc+0x1c>
 80a11c4:	4608      	mov	r0, r1
 80a11c6:	f000 fd37 	bl	80a1c38 <strlen>
 80a11ca:	4621      	mov	r1, r4
 80a11cc:	4602      	mov	r2, r0
 80a11ce:	4628      	mov	r0, r5
 80a11d0:	f7ff ffc9 	bl	80a1166 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a11d4:	4628      	mov	r0, r5
 80a11d6:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a11d8:	f7ff ff9a 	bl	80a1110 <_ZN6String10invalidateEv>
 80a11dc:	e7fa      	b.n	80a11d4 <_ZN6StringaSEPKc+0x18>

080a11de <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a11de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a11e0:	4606      	mov	r6, r0
 80a11e2:	460d      	mov	r5, r1
  size_t n = 0;
 80a11e4:	2400      	movs	r4, #0
 80a11e6:	188f      	adds	r7, r1, r2
  while (size--) {
 80a11e8:	42bd      	cmp	r5, r7
 80a11ea:	d00c      	beq.n	80a1206 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a11ec:	6833      	ldr	r3, [r6, #0]
 80a11ee:	4630      	mov	r0, r6
 80a11f0:	689b      	ldr	r3, [r3, #8]
 80a11f2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a11f6:	4798      	blx	r3
     if (chunk>=0)
 80a11f8:	1e03      	subs	r3, r0, #0
 80a11fa:	db01      	blt.n	80a1200 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a11fc:	441c      	add	r4, r3
  while (size--) {
 80a11fe:	e7f3      	b.n	80a11e8 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1200:	2c00      	cmp	r4, #0
 80a1202:	bf08      	it	eq
 80a1204:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1206:	4620      	mov	r0, r4
 80a1208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a120a <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a120a:	b570      	push	{r4, r5, r6, lr}
 80a120c:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a120e:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1210:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1212:	b149      	cbz	r1, 80a1228 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1214:	f000 fd10 	bl	80a1c38 <strlen>
 80a1218:	682b      	ldr	r3, [r5, #0]
 80a121a:	4602      	mov	r2, r0
 80a121c:	4621      	mov	r1, r4
 80a121e:	4628      	mov	r0, r5
    }
 80a1220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a1224:	68db      	ldr	r3, [r3, #12]
 80a1226:	4718      	bx	r3
    }
 80a1228:	bd70      	pop	{r4, r5, r6, pc}

080a122a <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a122a:	b508      	push	{r3, lr}
  return write(str);
 80a122c:	f7ff ffed 	bl	80a120a <_ZN5Print5writeEPKc>
}
 80a1230:	bd08      	pop	{r3, pc}

080a1232 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a1232:	6803      	ldr	r3, [r0, #0]
 80a1234:	689b      	ldr	r3, [r3, #8]
 80a1236:	4718      	bx	r3

080a1238 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1238:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a123a:	210d      	movs	r1, #13
{
 80a123c:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a123e:	f7ff fff8 	bl	80a1232 <_ZN5Print5printEc>
  n += print('\n');
 80a1242:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a1244:	4604      	mov	r4, r0
  n += print('\n');
 80a1246:	4628      	mov	r0, r5
 80a1248:	f7ff fff3 	bl	80a1232 <_ZN5Print5printEc>
  return n;
}
 80a124c:	4420      	add	r0, r4
 80a124e:	bd38      	pop	{r3, r4, r5, pc}

080a1250 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1250:	b538      	push	{r3, r4, r5, lr}
 80a1252:	4605      	mov	r5, r0
  return write(str);
 80a1254:	f7ff ffd9 	bl	80a120a <_ZN5Print5writeEPKc>
 80a1258:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a125a:	4628      	mov	r0, r5
 80a125c:	f7ff ffec 	bl	80a1238 <_ZN5Print7printlnEv>
  return n;
}
 80a1260:	4420      	add	r0, r4
 80a1262:	bd38      	pop	{r3, r4, r5, pc}

080a1264 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1264:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1266:	2a01      	cmp	r2, #1
 80a1268:	bf98      	it	ls
 80a126a:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a126c:	b530      	push	{r4, r5, lr}
 80a126e:	b08b      	sub	sp, #44	; 0x2c
 80a1270:	460c      	mov	r4, r1
  *str = '\0';
 80a1272:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1276:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a1278:	4625      	mov	r5, r4
 80a127a:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a127e:	fb04 5312 	mls	r3, r4, r2, r5
 80a1282:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1284:	2b09      	cmp	r3, #9
 80a1286:	bf94      	ite	ls
 80a1288:	3330      	addls	r3, #48	; 0x30
 80a128a:	3337      	addhi	r3, #55	; 0x37
 80a128c:	b2db      	uxtb	r3, r3
  } while(n);
 80a128e:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1290:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1294:	d9f0      	bls.n	80a1278 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1296:	f7ff ffb8 	bl	80a120a <_ZN5Print5writeEPKc>
}
 80a129a:	b00b      	add	sp, #44	; 0x2c
 80a129c:	bd30      	pop	{r4, r5, pc}

080a129e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a129e:	2300      	movs	r3, #0
 80a12a0:	6840      	ldr	r0, [r0, #4]
 80a12a2:	461a      	mov	r2, r3
 80a12a4:	4619      	mov	r1, r3
 80a12a6:	f7ff bc39 	b.w	80a0b1c <network_on>
	...

080a12ac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a12ac:	4b01      	ldr	r3, [pc, #4]	; (80a12b4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a12ae:	4a02      	ldr	r2, [pc, #8]	; (80a12b8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a12b0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a12b2:	4770      	bx	lr
 80a12b4:	20000124 	.word	0x20000124
 80a12b8:	080a1f48 	.word	0x080a1f48

080a12bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a12bc:	4b02      	ldr	r3, [pc, #8]	; (80a12c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a12be:	681a      	ldr	r2, [r3, #0]
 80a12c0:	4b02      	ldr	r3, [pc, #8]	; (80a12cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a12c2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a12c4:	4770      	bx	lr
 80a12c6:	bf00      	nop
 80a12c8:	20000014 	.word	0x20000014
 80a12cc:	20000128 	.word	0x20000128

080a12d0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a12d0:	2100      	movs	r1, #0
 80a12d2:	f7ff bbe7 	b.w	80a0aa4 <system_delay_ms>
	...

080a12d8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80a12d8:	2200      	movs	r2, #0
 80a12da:	4b01      	ldr	r3, [pc, #4]	; (80a12e0 <_GLOBAL__sub_I_RGB+0x8>)
 80a12dc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a12de:	4770      	bx	lr
 80a12e0:	2000012c 	.word	0x2000012c

080a12e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a12e4:	4b01      	ldr	r3, [pc, #4]	; (80a12ec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a12e6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a12e8:	4770      	bx	lr
 80a12ea:	bf00      	nop
 80a12ec:	20000018 	.word	0x20000018

080a12f0 <serialEventRun>:
{
 80a12f0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a12f2:	4b13      	ldr	r3, [pc, #76]	; (80a1340 <serialEventRun+0x50>)
 80a12f4:	b143      	cbz	r3, 80a1308 <serialEventRun+0x18>
 80a12f6:	f000 f989 	bl	80a160c <_Z16_fetch_usbserialv>
 80a12fa:	6803      	ldr	r3, [r0, #0]
 80a12fc:	691b      	ldr	r3, [r3, #16]
 80a12fe:	4798      	blx	r3
 80a1300:	2800      	cmp	r0, #0
 80a1302:	dd01      	ble.n	80a1308 <serialEventRun+0x18>
        serialEvent();
 80a1304:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a1308:	4b0e      	ldr	r3, [pc, #56]	; (80a1344 <serialEventRun+0x54>)
 80a130a:	b143      	cbz	r3, 80a131e <serialEventRun+0x2e>
 80a130c:	f000 fa2e 	bl	80a176c <_Z22__fetch_global_Serial1v>
 80a1310:	6803      	ldr	r3, [r0, #0]
 80a1312:	691b      	ldr	r3, [r3, #16]
 80a1314:	4798      	blx	r3
 80a1316:	2800      	cmp	r0, #0
 80a1318:	dd01      	ble.n	80a131e <serialEventRun+0x2e>
        serialEvent1();
 80a131a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a131e:	4b0a      	ldr	r3, [pc, #40]	; (80a1348 <serialEventRun+0x58>)
 80a1320:	b10b      	cbz	r3, 80a1326 <serialEventRun+0x36>
 80a1322:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1326:	4b09      	ldr	r3, [pc, #36]	; (80a134c <serialEventRun+0x5c>)
 80a1328:	b143      	cbz	r3, 80a133c <serialEventRun+0x4c>
 80a132a:	f000 f9a9 	bl	80a1680 <_Z17_fetch_usbserial1v>
 80a132e:	6803      	ldr	r3, [r0, #0]
 80a1330:	691b      	ldr	r3, [r3, #16]
 80a1332:	4798      	blx	r3
 80a1334:	2800      	cmp	r0, #0
 80a1336:	dd01      	ble.n	80a133c <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1338:	f3af 8000 	nop.w
}
 80a133c:	bd08      	pop	{r3, pc}
 80a133e:	bf00      	nop
	...

080a1350 <_post_loop>:
{
 80a1350:	b508      	push	{r3, lr}
	serialEventRun();
 80a1352:	f7ff ffcd 	bl	80a12f0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1356:	f7ff fab5 	bl	80a08c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a135a:	4b01      	ldr	r3, [pc, #4]	; (80a1360 <_post_loop+0x10>)
 80a135c:	6018      	str	r0, [r3, #0]
}
 80a135e:	bd08      	pop	{r3, pc}
 80a1360:	200005a8 	.word	0x200005a8

080a1364 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1364:	4805      	ldr	r0, [pc, #20]	; (80a137c <_Z33system_initialize_user_backup_ramv+0x18>)
 80a1366:	4a06      	ldr	r2, [pc, #24]	; (80a1380 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a1368:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a136a:	1a12      	subs	r2, r2, r0
 80a136c:	4905      	ldr	r1, [pc, #20]	; (80a1384 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a136e:	f000 fc1f 	bl	80a1bb0 <memcpy>
    __backup_sram_signature = signature;
 80a1372:	4b05      	ldr	r3, [pc, #20]	; (80a1388 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a1374:	4a05      	ldr	r2, [pc, #20]	; (80a138c <_Z33system_initialize_user_backup_ramv+0x28>)
 80a1376:	601a      	str	r2, [r3, #0]
}
 80a1378:	bd08      	pop	{r3, pc}
 80a137a:	bf00      	nop
 80a137c:	40024000 	.word	0x40024000
 80a1380:	40024004 	.word	0x40024004
 80a1384:	080a2170 	.word	0x080a2170
 80a1388:	40024000 	.word	0x40024000
 80a138c:	9a271c1e 	.word	0x9a271c1e

080a1390 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1390:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1392:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1394:	461a      	mov	r2, r3
 80a1396:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a139a:	9300      	str	r3, [sp, #0]
 80a139c:	f7ff fb94 	bl	80a0ac8 <system_ctrl_set_result>
}
 80a13a0:	b003      	add	sp, #12
 80a13a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a13a8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a13a8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a13aa:	8843      	ldrh	r3, [r0, #2]
 80a13ac:	2b0a      	cmp	r3, #10
 80a13ae:	d008      	beq.n	80a13c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a13b0:	2b50      	cmp	r3, #80	; 0x50
 80a13b2:	d10b      	bne.n	80a13cc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a13b4:	4b09      	ldr	r3, [pc, #36]	; (80a13dc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a13b6:	681b      	ldr	r3, [r3, #0]
 80a13b8:	b14b      	cbz	r3, 80a13ce <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a13ba:	b003      	add	sp, #12
 80a13bc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a13c0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a13c2:	f7ff ffe5 	bl	80a1390 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a13c6:	b003      	add	sp, #12
 80a13c8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a13cc:	2300      	movs	r3, #0
 80a13ce:	461a      	mov	r2, r3
 80a13d0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a13d4:	9300      	str	r3, [sp, #0]
 80a13d6:	f7ff fb77 	bl	80a0ac8 <system_ctrl_set_result>
}
 80a13da:	e7f4      	b.n	80a13c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a13dc:	20000140 	.word	0x20000140

080a13e0 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a13e0:	2100      	movs	r1, #0
{
 80a13e2:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a13e4:	4811      	ldr	r0, [pc, #68]	; (80a142c <module_user_init_hook+0x4c>)
 80a13e6:	f7ff fbf9 	bl	80a0bdc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a13ea:	4b11      	ldr	r3, [pc, #68]	; (80a1430 <module_user_init_hook+0x50>)
 80a13ec:	681a      	ldr	r2, [r3, #0]
 80a13ee:	4b11      	ldr	r3, [pc, #68]	; (80a1434 <module_user_init_hook+0x54>)
 80a13f0:	429a      	cmp	r2, r3
 80a13f2:	bf0c      	ite	eq
 80a13f4:	2201      	moveq	r2, #1
 80a13f6:	2200      	movne	r2, #0
 80a13f8:	4b0f      	ldr	r3, [pc, #60]	; (80a1438 <module_user_init_hook+0x58>)
 80a13fa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a13fc:	d001      	beq.n	80a1402 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a13fe:	f7ff ffb1 	bl	80a1364 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1402:	f7ff fa57 	bl	80a08b4 <HAL_RNG_GetRandomNumber>
 80a1406:	4604      	mov	r4, r0
    srand(seed);
 80a1408:	f000 fbe8 	bl	80a1bdc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a140c:	4b0b      	ldr	r3, [pc, #44]	; (80a143c <module_user_init_hook+0x5c>)
 80a140e:	b113      	cbz	r3, 80a1416 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a1410:	4620      	mov	r0, r4
 80a1412:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1416:	2100      	movs	r1, #0
 80a1418:	4808      	ldr	r0, [pc, #32]	; (80a143c <module_user_init_hook+0x5c>)
 80a141a:	f7ff fbbf 	bl	80a0b9c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a141e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1422:	2100      	movs	r1, #0
 80a1424:	4806      	ldr	r0, [pc, #24]	; (80a1440 <module_user_init_hook+0x60>)
 80a1426:	f7ff bb45 	b.w	80a0ab4 <system_ctrl_set_app_request_handler>
 80a142a:	bf00      	nop
 80a142c:	080a12e5 	.word	0x080a12e5
 80a1430:	40024000 	.word	0x40024000
 80a1434:	9a271c1e 	.word	0x9a271c1e
 80a1438:	2000013c 	.word	0x2000013c
 80a143c:	00000000 	.word	0x00000000
 80a1440:	080a13a9 	.word	0x080a13a9

080a1444 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 80a1444:	4770      	bx	lr

080a1446 <_ZN9IPAddressD0Ev>:
 80a1446:	b510      	push	{r4, lr}
 80a1448:	4604      	mov	r4, r0
 80a144a:	2118      	movs	r1, #24
 80a144c:	f000 fa94 	bl	80a1978 <_ZdlPvj>
 80a1450:	4620      	mov	r0, r4
 80a1452:	bd10      	pop	{r4, pc}

080a1454 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1456:	460e      	mov	r6, r1
 80a1458:	2400      	movs	r4, #0
 80a145a:	f100 0708 	add.w	r7, r0, #8
 80a145e:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a1460:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a1464:	220a      	movs	r2, #10
 80a1466:	4630      	mov	r0, r6
 80a1468:	f7ff fefc 	bl	80a1264 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a146c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a146e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a1470:	d101      	bne.n	80a1476 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a1472:	4620      	mov	r0, r4
 80a1474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a1476:	2c00      	cmp	r4, #0
 80a1478:	d0f2      	beq.n	80a1460 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a147a:	212e      	movs	r1, #46	; 0x2e
 80a147c:	4630      	mov	r0, r6
 80a147e:	f7ff fed8 	bl	80a1232 <_ZN5Print5printEc>
 80a1482:	4404      	add	r4, r0
 80a1484:	e7ec      	b.n	80a1460 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a1488 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1488:	b510      	push	{r4, lr}
 80a148a:	4604      	mov	r4, r0
 80a148c:	4b04      	ldr	r3, [pc, #16]	; (80a14a0 <_ZN9IPAddressC1Ev+0x18>)
    void clear() { memset(&address, 0, sizeof (address)); }
 80a148e:	2211      	movs	r2, #17
 80a1490:	2100      	movs	r1, #0
 80a1492:	f840 3b04 	str.w	r3, [r0], #4
 80a1496:	f000 fb99 	bl	80a1bcc <memset>
}
 80a149a:	4620      	mov	r0, r4
 80a149c:	bd10      	pop	{r4, pc}
 80a149e:	bf00      	nop
 80a14a0:	080a1f70 	.word	0x080a1f70

080a14a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a14a4:	4603      	mov	r3, r0
 80a14a6:	4a07      	ldr	r2, [pc, #28]	; (80a14c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a14a8:	b510      	push	{r4, lr}
 80a14aa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a14ae:	f101 0210 	add.w	r2, r1, #16
 80a14b2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a14b6:	4291      	cmp	r1, r2
 80a14b8:	f843 4b04 	str.w	r4, [r3], #4
 80a14bc:	d1f9      	bne.n	80a14b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a14be:	780a      	ldrb	r2, [r1, #0]
 80a14c0:	701a      	strb	r2, [r3, #0]
}
 80a14c2:	bd10      	pop	{r4, pc}
 80a14c4:	080a1f70 	.word	0x080a1f70

080a14c8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a14c8:	4a02      	ldr	r2, [pc, #8]	; (80a14d4 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a14ca:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a14ce:	2204      	movs	r2, #4
 80a14d0:	7502      	strb	r2, [r0, #20]
}
 80a14d2:	4770      	bx	lr
 80a14d4:	080a1f70 	.word	0x080a1f70

080a14d8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a14d8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a14da:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a14de:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a14e2:	2304      	movs	r3, #4
 80a14e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a14e8:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a14ec:	6044      	str	r4, [r0, #4]
 80a14ee:	7503      	strb	r3, [r0, #20]
}
 80a14f0:	bd10      	pop	{r4, pc}
	...

080a14f4 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a14f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a14f6:	4d04      	ldr	r5, [pc, #16]	; (80a1508 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a14f8:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a14fa:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a14fe:	9500      	str	r5, [sp, #0]
 80a1500:	f7ff ffea 	bl	80a14d8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1504:	b003      	add	sp, #12
 80a1506:	bd30      	pop	{r4, r5, pc}
 80a1508:	080a1f70 	.word	0x080a1f70

080a150c <_ZN9IPAddressaSEPKh>:
{
 80a150c:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a150e:	78cb      	ldrb	r3, [r1, #3]
 80a1510:	9300      	str	r3, [sp, #0]
 80a1512:	788b      	ldrb	r3, [r1, #2]
 80a1514:	784a      	ldrb	r2, [r1, #1]
 80a1516:	7809      	ldrb	r1, [r1, #0]
 80a1518:	f7ff ffde 	bl	80a14d8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a151c:	b002      	add	sp, #8
 80a151e:	bd10      	pop	{r4, pc}

080a1520 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* address)
 80a1520:	b510      	push	{r4, lr}
 80a1522:	4604      	mov	r4, r0
 80a1524:	4b02      	ldr	r3, [pc, #8]	; (80a1530 <_ZN9IPAddressC1EPKh+0x10>)
 80a1526:	6003      	str	r3, [r0, #0]
    *this = address;
 80a1528:	f7ff fff0 	bl	80a150c <_ZN9IPAddressaSEPKh>
}
 80a152c:	4620      	mov	r0, r4
 80a152e:	bd10      	pop	{r4, pc}
 80a1530:	080a1f70 	.word	0x080a1f70

080a1534 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1534:	7441      	strb	r1, [r0, #17]
}
 80a1536:	4770      	bx	lr

080a1538 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1538:	4770      	bx	lr

080a153a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a153a:	4770      	bx	lr

080a153c <_ZN9USBSerial4readEv>:
{
 80a153c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a153e:	2100      	movs	r1, #0
 80a1540:	7c00      	ldrb	r0, [r0, #16]
 80a1542:	f7ff fa77 	bl	80a0a34 <HAL_USB_USART_Receive_Data>
}
 80a1546:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a154a:	bd08      	pop	{r3, pc}

080a154c <_ZN9USBSerial4peekEv>:
{
 80a154c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a154e:	2101      	movs	r1, #1
 80a1550:	7c00      	ldrb	r0, [r0, #16]
 80a1552:	f7ff fa6f 	bl	80a0a34 <HAL_USB_USART_Receive_Data>
}
 80a1556:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a155a:	bd08      	pop	{r3, pc}

080a155c <_ZN9USBSerial17availableForWriteEv>:
{
 80a155c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a155e:	7c00      	ldrb	r0, [r0, #16]
 80a1560:	f7ff fa60 	bl	80a0a24 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1564:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1568:	bd08      	pop	{r3, pc}

080a156a <_ZN9USBSerial9availableEv>:
{
 80a156a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a156c:	7c00      	ldrb	r0, [r0, #16]
 80a156e:	f7ff fa51 	bl	80a0a14 <HAL_USB_USART_Available_Data>
}
 80a1572:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1576:	bd08      	pop	{r3, pc}

080a1578 <_ZN9USBSerial5writeEh>:
{
 80a1578:	b538      	push	{r3, r4, r5, lr}
 80a157a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a157c:	7c00      	ldrb	r0, [r0, #16]
{
 80a157e:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1580:	f7ff fa50 	bl	80a0a24 <HAL_USB_USART_Available_Data_For_Write>
 80a1584:	2800      	cmp	r0, #0
 80a1586:	dc01      	bgt.n	80a158c <_ZN9USBSerial5writeEh+0x14>
 80a1588:	7c60      	ldrb	r0, [r4, #17]
 80a158a:	b128      	cbz	r0, 80a1598 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a158c:	4629      	mov	r1, r5
 80a158e:	7c20      	ldrb	r0, [r4, #16]
 80a1590:	f7ff fa58 	bl	80a0a44 <HAL_USB_USART_Send_Data>
 80a1594:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a1598:	bd38      	pop	{r3, r4, r5, pc}

080a159a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a159a:	7c00      	ldrb	r0, [r0, #16]
 80a159c:	f7ff ba5a 	b.w	80a0a54 <HAL_USB_USART_Flush_Data>

080a15a0 <_ZN9USBSerialD0Ev>:
 80a15a0:	b510      	push	{r4, lr}
 80a15a2:	4604      	mov	r4, r0
 80a15a4:	2114      	movs	r1, #20
 80a15a6:	f000 f9e7 	bl	80a1978 <_ZdlPvj>
 80a15aa:	4620      	mov	r0, r4
 80a15ac:	bd10      	pop	{r4, pc}

080a15ae <__tcf_1>:
 80a15ae:	4770      	bx	lr

080a15b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a15b0:	b510      	push	{r4, lr}
 80a15b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a15b6:	4604      	mov	r4, r0
 80a15b8:	4608      	mov	r0, r1
 80a15ba:	2100      	movs	r1, #0
 80a15bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a15c0:	4b04      	ldr	r3, [pc, #16]	; (80a15d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a15c2:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a15c4:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a15c6:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a15c8:	4611      	mov	r1, r2
  _blocking = true;
 80a15ca:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a15cc:	f7ff fa12 	bl	80a09f4 <HAL_USB_USART_Init>
}
 80a15d0:	4620      	mov	r0, r4
 80a15d2:	bd10      	pop	{r4, pc}
 80a15d4:	080a1f84 	.word	0x080a1f84

080a15d8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a15d8:	2200      	movs	r2, #0
 80a15da:	7c00      	ldrb	r0, [r0, #16]
 80a15dc:	f7ff ba12 	b.w	80a0a04 <HAL_USB_USART_Begin>

080a15e0 <_Z19acquireSerialBufferv>:
{
 80a15e0:	b510      	push	{r4, lr}
 80a15e2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a15e4:	2214      	movs	r2, #20
 80a15e6:	2100      	movs	r1, #0
 80a15e8:	f000 faf0 	bl	80a1bcc <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a15ec:	4b05      	ldr	r3, [pc, #20]	; (80a1604 <_Z19acquireSerialBufferv+0x24>)
}
 80a15ee:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a15f0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a15f2:	4b05      	ldr	r3, [pc, #20]	; (80a1608 <_Z19acquireSerialBufferv+0x28>)
 80a15f4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a15f6:	f240 1301 	movw	r3, #257	; 0x101
 80a15fa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a15fc:	2381      	movs	r3, #129	; 0x81
 80a15fe:	8223      	strh	r3, [r4, #16]
}
 80a1600:	bd10      	pop	{r4, pc}
 80a1602:	bf00      	nop
 80a1604:	20000174 	.word	0x20000174
 80a1608:	20000275 	.word	0x20000275

080a160c <_Z16_fetch_usbserialv>:
{
 80a160c:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a160e:	4d0e      	ldr	r5, [pc, #56]	; (80a1648 <_Z16_fetch_usbserialv+0x3c>)
{
 80a1610:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1612:	a801      	add	r0, sp, #4
 80a1614:	f7ff ffe4 	bl	80a15e0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1618:	7829      	ldrb	r1, [r5, #0]
 80a161a:	f3bf 8f5b 	dmb	ish
 80a161e:	f011 0401 	ands.w	r4, r1, #1
 80a1622:	d10e      	bne.n	80a1642 <_Z16_fetch_usbserialv+0x36>
 80a1624:	4628      	mov	r0, r5
 80a1626:	f7fe fd3e 	bl	80a00a6 <__cxa_guard_acquire>
 80a162a:	b150      	cbz	r0, 80a1642 <_Z16_fetch_usbserialv+0x36>
 80a162c:	4621      	mov	r1, r4
 80a162e:	aa01      	add	r2, sp, #4
 80a1630:	4806      	ldr	r0, [pc, #24]	; (80a164c <_Z16_fetch_usbserialv+0x40>)
 80a1632:	f7ff ffbd 	bl	80a15b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1636:	4628      	mov	r0, r5
 80a1638:	f7fe fd3a 	bl	80a00b0 <__cxa_guard_release>
 80a163c:	4804      	ldr	r0, [pc, #16]	; (80a1650 <_Z16_fetch_usbserialv+0x44>)
 80a163e:	f000 fab1 	bl	80a1ba4 <atexit>
	return _usbserial;
}
 80a1642:	4802      	ldr	r0, [pc, #8]	; (80a164c <_Z16_fetch_usbserialv+0x40>)
 80a1644:	b007      	add	sp, #28
 80a1646:	bd30      	pop	{r4, r5, pc}
 80a1648:	20000144 	.word	0x20000144
 80a164c:	2000014c 	.word	0x2000014c
 80a1650:	080a1539 	.word	0x080a1539

080a1654 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1654:	b510      	push	{r4, lr}
 80a1656:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1658:	2214      	movs	r2, #20
 80a165a:	2100      	movs	r1, #0
 80a165c:	f000 fab6 	bl	80a1bcc <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1660:	4b05      	ldr	r3, [pc, #20]	; (80a1678 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1662:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1664:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1666:	4b05      	ldr	r3, [pc, #20]	; (80a167c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1668:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a166a:	f240 1301 	movw	r3, #257	; 0x101
 80a166e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1670:	2381      	movs	r3, #129	; 0x81
 80a1672:	8223      	strh	r3, [r4, #16]
}
 80a1674:	bd10      	pop	{r4, pc}
 80a1676:	bf00      	nop
 80a1678:	200002f6 	.word	0x200002f6
 80a167c:	200003f7 	.word	0x200003f7

080a1680 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1680:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1682:	4c0e      	ldr	r4, [pc, #56]	; (80a16bc <_Z17_fetch_usbserial1v+0x3c>)
{
 80a1684:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1686:	a801      	add	r0, sp, #4
 80a1688:	f7ff ffe4 	bl	80a1654 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a168c:	7823      	ldrb	r3, [r4, #0]
 80a168e:	f3bf 8f5b 	dmb	ish
 80a1692:	07db      	lsls	r3, r3, #31
 80a1694:	d40e      	bmi.n	80a16b4 <_Z17_fetch_usbserial1v+0x34>
 80a1696:	4620      	mov	r0, r4
 80a1698:	f7fe fd05 	bl	80a00a6 <__cxa_guard_acquire>
 80a169c:	b150      	cbz	r0, 80a16b4 <_Z17_fetch_usbserial1v+0x34>
 80a169e:	2101      	movs	r1, #1
 80a16a0:	aa01      	add	r2, sp, #4
 80a16a2:	4807      	ldr	r0, [pc, #28]	; (80a16c0 <_Z17_fetch_usbserial1v+0x40>)
 80a16a4:	f7ff ff84 	bl	80a15b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a16a8:	4620      	mov	r0, r4
 80a16aa:	f7fe fd01 	bl	80a00b0 <__cxa_guard_release>
 80a16ae:	4805      	ldr	r0, [pc, #20]	; (80a16c4 <_Z17_fetch_usbserial1v+0x44>)
 80a16b0:	f000 fa78 	bl	80a1ba4 <atexit>
  return _usbserial1;
}
 80a16b4:	4802      	ldr	r0, [pc, #8]	; (80a16c0 <_Z17_fetch_usbserial1v+0x40>)
 80a16b6:	b006      	add	sp, #24
 80a16b8:	bd10      	pop	{r4, pc}
 80a16ba:	bf00      	nop
 80a16bc:	20000148 	.word	0x20000148
 80a16c0:	20000160 	.word	0x20000160
 80a16c4:	080a15af 	.word	0x080a15af

080a16c8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a16c8:	4770      	bx	lr

080a16ca <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a16ca:	7441      	strb	r1, [r0, #17]
}
 80a16cc:	4770      	bx	lr

080a16ce <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a16ce:	4770      	bx	lr

080a16d0 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a16d0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a16d2:	7c00      	ldrb	r0, [r0, #16]
 80a16d4:	f7ff f946 	bl	80a0964 <hal_usart_available_data_for_write>
}
 80a16d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a16dc:	bd08      	pop	{r3, pc}

080a16de <_ZN11USARTSerial9availableEv>:
{
 80a16de:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a16e0:	7c00      	ldrb	r0, [r0, #16]
 80a16e2:	f7ff f91f 	bl	80a0924 <hal_usart_available>
}
 80a16e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a16ea:	bd08      	pop	{r3, pc}

080a16ec <_ZN11USARTSerial4peekEv>:
{
 80a16ec:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a16ee:	7c00      	ldrb	r0, [r0, #16]
 80a16f0:	f7ff f928 	bl	80a0944 <hal_usart_peek>
}
 80a16f4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a16f8:	bd08      	pop	{r3, pc}

080a16fa <_ZN11USARTSerial4readEv>:
{
 80a16fa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a16fc:	7c00      	ldrb	r0, [r0, #16]
 80a16fe:	f7ff f919 	bl	80a0934 <hal_usart_read>
}
 80a1702:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a1706:	bd08      	pop	{r3, pc}

080a1708 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a1708:	7c00      	ldrb	r0, [r0, #16]
 80a170a:	f7ff b923 	b.w	80a0954 <hal_usart_flush>

080a170e <_ZN11USARTSerial5writeEh>:
{
 80a170e:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1710:	7c46      	ldrb	r6, [r0, #17]
{
 80a1712:	4604      	mov	r4, r0
 80a1714:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1716:	b12e      	cbz	r6, 80a1724 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a1718:	4629      	mov	r1, r5
 80a171a:	7c20      	ldrb	r0, [r4, #16]
}
 80a171c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a1720:	f7ff b8f8 	b.w	80a0914 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1724:	7c00      	ldrb	r0, [r0, #16]
 80a1726:	f7ff f91d 	bl	80a0964 <hal_usart_available_data_for_write>
 80a172a:	2800      	cmp	r0, #0
 80a172c:	dcf4      	bgt.n	80a1718 <_ZN11USARTSerial5writeEh+0xa>
}
 80a172e:	4630      	mov	r0, r6
 80a1730:	bd70      	pop	{r4, r5, r6, pc}

080a1732 <_ZN11USARTSerialD0Ev>:
 80a1732:	b510      	push	{r4, lr}
 80a1734:	4604      	mov	r4, r0
 80a1736:	2114      	movs	r1, #20
 80a1738:	f000 f91e 	bl	80a1978 <_ZdlPvj>
 80a173c:	4620      	mov	r0, r4
 80a173e:	bd10      	pop	{r4, pc}

080a1740 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a1740:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1744:	b510      	push	{r4, lr}
 80a1746:	4604      	mov	r4, r0
 80a1748:	4608      	mov	r0, r1
 80a174a:	4611      	mov	r1, r2
 80a174c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1750:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1754:	4a04      	ldr	r2, [pc, #16]	; (80a1768 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a1756:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1758:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a175a:	2201      	movs	r2, #1
 80a175c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a175e:	461a      	mov	r2, r3
 80a1760:	f7ff f8d0 	bl	80a0904 <hal_usart_init>
}
 80a1764:	4620      	mov	r0, r4
 80a1766:	bd10      	pop	{r4, pc}
 80a1768:	080a1fb4 	.word	0x080a1fb4

080a176c <_Z22__fetch_global_Serial1v>:
{
 80a176c:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a176e:	4d0c      	ldr	r5, [pc, #48]	; (80a17a0 <_Z22__fetch_global_Serial1v+0x34>)
 80a1770:	7829      	ldrb	r1, [r5, #0]
 80a1772:	f3bf 8f5b 	dmb	ish
 80a1776:	f011 0401 	ands.w	r4, r1, #1
 80a177a:	d10f      	bne.n	80a179c <_Z22__fetch_global_Serial1v+0x30>
 80a177c:	4628      	mov	r0, r5
 80a177e:	f7fe fc92 	bl	80a00a6 <__cxa_guard_acquire>
 80a1782:	b158      	cbz	r0, 80a179c <_Z22__fetch_global_Serial1v+0x30>
 80a1784:	4621      	mov	r1, r4
 80a1786:	4b07      	ldr	r3, [pc, #28]	; (80a17a4 <_Z22__fetch_global_Serial1v+0x38>)
 80a1788:	4a07      	ldr	r2, [pc, #28]	; (80a17a8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a178a:	4808      	ldr	r0, [pc, #32]	; (80a17ac <_Z22__fetch_global_Serial1v+0x40>)
 80a178c:	f7ff ffd8 	bl	80a1740 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1790:	4628      	mov	r0, r5
 80a1792:	f7fe fc8d 	bl	80a00b0 <__cxa_guard_release>
 80a1796:	4806      	ldr	r0, [pc, #24]	; (80a17b0 <_Z22__fetch_global_Serial1v+0x44>)
 80a1798:	f000 fa04 	bl	80a1ba4 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a179c:	4803      	ldr	r0, [pc, #12]	; (80a17ac <_Z22__fetch_global_Serial1v+0x40>)
 80a179e:	bd38      	pop	{r3, r4, r5, pc}
 80a17a0:	20000478 	.word	0x20000478
 80a17a4:	20000500 	.word	0x20000500
 80a17a8:	2000047c 	.word	0x2000047c
 80a17ac:	20000584 	.word	0x20000584
 80a17b0:	080a16cf 	.word	0x080a16cf

080a17b4 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a17b4:	2200      	movs	r2, #0
 80a17b6:	6840      	ldr	r0, [r0, #4]
 80a17b8:	4611      	mov	r1, r2
 80a17ba:	f7ff b9a7 	b.w	80a0b0c <network_ready>

080a17be <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a17be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a17c0:	4615      	mov	r5, r2
 80a17c2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a17c4:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a17c6:	460e      	mov	r6, r1
 80a17c8:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a17ca:	2100      	movs	r1, #0
 80a17cc:	a803      	add	r0, sp, #12
 80a17ce:	f000 f9fd 	bl	80a1bcc <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a17d2:	4628      	mov	r0, r5
 80a17d4:	f000 fa30 	bl	80a1c38 <strlen>
 80a17d8:	2700      	movs	r7, #0
 80a17da:	b281      	uxth	r1, r0
 80a17dc:	6873      	ldr	r3, [r6, #4]
 80a17de:	4628      	mov	r0, r5
 80a17e0:	9700      	str	r7, [sp, #0]
 80a17e2:	aa03      	add	r2, sp, #12
 80a17e4:	f7ff f946 	bl	80a0a74 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a17e8:	b130      	cbz	r0, 80a17f8 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a17ea:	4639      	mov	r1, r7
 80a17ec:	4620      	mov	r0, r4
 80a17ee:	f7ff fe6b 	bl	80a14c8 <_ZN9IPAddressC1Em>
    }
 80a17f2:	4620      	mov	r0, r4
 80a17f4:	b009      	add	sp, #36	; 0x24
 80a17f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a17f8:	4620      	mov	r0, r4
 80a17fa:	a903      	add	r1, sp, #12
 80a17fc:	f7ff fe52 	bl	80a14a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a1800:	e7f7      	b.n	80a17f2 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a1802 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a1802:	2200      	movs	r2, #0
 80a1804:	6840      	ldr	r0, [r0, #4]
 80a1806:	4611      	mov	r1, r2
 80a1808:	f7ff b9a0 	b.w	80a0b4c <network_listening>

080a180c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a180c:	2200      	movs	r2, #0
 80a180e:	6840      	ldr	r0, [r0, #4]
 80a1810:	4611      	mov	r1, r2
 80a1812:	f7ff b9ab 	b.w	80a0b6c <network_get_listen_timeout>

080a1816 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a1816:	2200      	movs	r2, #0
 80a1818:	6840      	ldr	r0, [r0, #4]
 80a181a:	f7ff b99f 	b.w	80a0b5c <network_set_listen_timeout>

080a181e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a181e:	2200      	movs	r2, #0
 80a1820:	6840      	ldr	r0, [r0, #4]
 80a1822:	f081 0101 	eor.w	r1, r1, #1
 80a1826:	f7ff b989 	b.w	80a0b3c <network_listen>

080a182a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a182a:	2300      	movs	r3, #0
 80a182c:	6840      	ldr	r0, [r0, #4]
 80a182e:	461a      	mov	r2, r3
 80a1830:	4619      	mov	r1, r3
 80a1832:	f7ff b97b 	b.w	80a0b2c <network_off>

080a1836 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a1836:	2200      	movs	r2, #0
 80a1838:	6840      	ldr	r0, [r0, #4]
 80a183a:	4611      	mov	r1, r2
 80a183c:	f7ff b956 	b.w	80a0aec <network_connecting>

080a1840 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1840:	2200      	movs	r2, #0
 80a1842:	2102      	movs	r1, #2
 80a1844:	6840      	ldr	r0, [r0, #4]
 80a1846:	f7ff b959 	b.w	80a0afc <network_disconnect>

080a184a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a184a:	2300      	movs	r3, #0
 80a184c:	6840      	ldr	r0, [r0, #4]
 80a184e:	461a      	mov	r2, r3
 80a1850:	f7ff b944 	b.w	80a0adc <network_connect>

080a1854 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1854:	2204      	movs	r2, #4
 80a1856:	4b02      	ldr	r3, [pc, #8]	; (80a1860 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1858:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a185a:	4a02      	ldr	r2, [pc, #8]	; (80a1864 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a185c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a185e:	4770      	bx	lr
 80a1860:	20000598 	.word	0x20000598
 80a1864:	080a1fe4 	.word	0x080a1fe4

080a1868 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1868:	2300      	movs	r3, #0
 80a186a:	6840      	ldr	r0, [r0, #4]
 80a186c:	461a      	mov	r2, r3
 80a186e:	f7ff b935 	b.w	80a0adc <network_connect>

080a1872 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1872:	2200      	movs	r2, #0
 80a1874:	2102      	movs	r1, #2
 80a1876:	6840      	ldr	r0, [r0, #4]
 80a1878:	f7ff b940 	b.w	80a0afc <network_disconnect>

080a187c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a187c:	2200      	movs	r2, #0
 80a187e:	6840      	ldr	r0, [r0, #4]
 80a1880:	4611      	mov	r1, r2
 80a1882:	f7ff b933 	b.w	80a0aec <network_connecting>

080a1886 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1886:	2200      	movs	r2, #0
 80a1888:	6840      	ldr	r0, [r0, #4]
 80a188a:	4611      	mov	r1, r2
 80a188c:	f7ff b93e 	b.w	80a0b0c <network_ready>

080a1890 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1890:	2300      	movs	r3, #0
 80a1892:	6840      	ldr	r0, [r0, #4]
 80a1894:	461a      	mov	r2, r3
 80a1896:	4619      	mov	r1, r3
 80a1898:	f7ff b940 	b.w	80a0b1c <network_on>

080a189c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a189c:	2300      	movs	r3, #0
 80a189e:	6840      	ldr	r0, [r0, #4]
 80a18a0:	461a      	mov	r2, r3
 80a18a2:	4619      	mov	r1, r3
 80a18a4:	f7ff b942 	b.w	80a0b2c <network_off>

080a18a8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a18a8:	2100      	movs	r1, #0
 80a18aa:	6840      	ldr	r0, [r0, #4]
 80a18ac:	f7ff b966 	b.w	80a0b7c <network_is_on>

080a18b0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a18b0:	2100      	movs	r1, #0
 80a18b2:	6840      	ldr	r0, [r0, #4]
 80a18b4:	f7ff b96a 	b.w	80a0b8c <network_is_off>

080a18b8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a18b8:	2200      	movs	r2, #0
 80a18ba:	6840      	ldr	r0, [r0, #4]
 80a18bc:	f081 0101 	eor.w	r1, r1, #1
 80a18c0:	f7ff b93c 	b.w	80a0b3c <network_listen>

080a18c4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a18c4:	2200      	movs	r2, #0
 80a18c6:	6840      	ldr	r0, [r0, #4]
 80a18c8:	f7ff b948 	b.w	80a0b5c <network_set_listen_timeout>

080a18cc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a18cc:	2200      	movs	r2, #0
 80a18ce:	6840      	ldr	r0, [r0, #4]
 80a18d0:	4611      	mov	r1, r2
 80a18d2:	f7ff b94b 	b.w	80a0b6c <network_get_listen_timeout>

080a18d6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a18d6:	2200      	movs	r2, #0
 80a18d8:	6840      	ldr	r0, [r0, #4]
 80a18da:	4611      	mov	r1, r2
 80a18dc:	f7ff b936 	b.w	80a0b4c <network_listening>

080a18e0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a18e0:	b570      	push	{r4, r5, r6, lr}
 80a18e2:	4615      	mov	r5, r2
 80a18e4:	b08e      	sub	sp, #56	; 0x38
 80a18e6:	4604      	mov	r4, r0
    IPAddress addr;
 80a18e8:	a808      	add	r0, sp, #32
 80a18ea:	f7ff fdcd 	bl	80a1488 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a18ee:	2211      	movs	r2, #17
 80a18f0:	2100      	movs	r1, #0
 80a18f2:	a803      	add	r0, sp, #12
 80a18f4:	f000 f96a 	bl	80a1bcc <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a18f8:	2600      	movs	r6, #0
 80a18fa:	4628      	mov	r0, r5
 80a18fc:	f000 f99c 	bl	80a1c38 <strlen>
 80a1900:	4b0a      	ldr	r3, [pc, #40]	; (80a192c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1902:	9600      	str	r6, [sp, #0]
 80a1904:	b281      	uxth	r1, r0
 80a1906:	685b      	ldr	r3, [r3, #4]
 80a1908:	4628      	mov	r0, r5
 80a190a:	aa03      	add	r2, sp, #12
 80a190c:	f7ff f8b2 	bl	80a0a74 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1910:	b130      	cbz	r0, 80a1920 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a1912:	4631      	mov	r1, r6
 80a1914:	4620      	mov	r0, r4
 80a1916:	f7ff fdd7 	bl	80a14c8 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a191a:	4620      	mov	r0, r4
 80a191c:	b00e      	add	sp, #56	; 0x38
 80a191e:	bd70      	pop	{r4, r5, r6, pc}
 80a1920:	4620      	mov	r0, r4
 80a1922:	a903      	add	r1, sp, #12
 80a1924:	f7ff fdbe 	bl	80a14a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1928:	e7f7      	b.n	80a191a <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a192a:	bf00      	nop
 80a192c:	20000598 	.word	0x20000598

080a1930 <_ZN5spark12NetworkClass4fromEm>:
}
 80a1930:	4a03      	ldr	r2, [pc, #12]	; (80a1940 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a1932:	4b04      	ldr	r3, [pc, #16]	; (80a1944 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a1934:	2804      	cmp	r0, #4
 80a1936:	bf14      	ite	ne
 80a1938:	4610      	movne	r0, r2
 80a193a:	4618      	moveq	r0, r3
 80a193c:	4770      	bx	lr
 80a193e:	bf00      	nop
 80a1940:	200005a0 	.word	0x200005a0
 80a1944:	20000598 	.word	0x20000598

080a1948 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1948:	4b02      	ldr	r3, [pc, #8]	; (80a1954 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a194a:	4a03      	ldr	r2, [pc, #12]	; (80a1958 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a194c:	601a      	str	r2, [r3, #0]
 80a194e:	2200      	movs	r2, #0
 80a1950:	605a      	str	r2, [r3, #4]

} // spark
 80a1952:	4770      	bx	lr
 80a1954:	200005a0 	.word	0x200005a0
 80a1958:	080a2020 	.word	0x080a2020

080a195c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a195c:	2300      	movs	r3, #0
 80a195e:	b507      	push	{r0, r1, r2, lr}
 80a1960:	461a      	mov	r2, r3
 80a1962:	4619      	mov	r1, r3
 80a1964:	9300      	str	r3, [sp, #0]
 80a1966:	4803      	ldr	r0, [pc, #12]	; (80a1974 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a1968:	f7ff fdc4 	bl	80a14f4 <_ZN9IPAddressC1Ehhhh>
 80a196c:	b003      	add	sp, #12
 80a196e:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1972:	bf00      	nop
 80a1974:	200005ac 	.word	0x200005ac

080a1978 <_ZdlPvj>:
 80a1978:	f7fe bb91 	b.w	80a009e <_ZdlPv>

080a197c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a197c:	4901      	ldr	r1, [pc, #4]	; (80a1984 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a197e:	f000 b8fb 	b.w	80a1b78 <_ZNKSt9type_infoeqERKS_>
 80a1982:	bf00      	nop
 80a1984:	080a206c 	.word	0x080a206c

080a1988 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a1988:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a198a:	2400      	movs	r4, #0
 80a198c:	2310      	movs	r3, #16
 80a198e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a1992:	6803      	ldr	r3, [r0, #0]
 80a1994:	4615      	mov	r5, r2
 80a1996:	699e      	ldr	r6, [r3, #24]
 80a1998:	6812      	ldr	r2, [r2, #0]
 80a199a:	466b      	mov	r3, sp
 80a199c:	9400      	str	r4, [sp, #0]
 80a199e:	f88d 4004 	strb.w	r4, [sp, #4]
 80a19a2:	47b0      	blx	r6
 80a19a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a19a8:	f003 0306 	and.w	r3, r3, #6
 80a19ac:	2b06      	cmp	r3, #6
 80a19ae:	bf09      	itett	eq
 80a19b0:	2001      	moveq	r0, #1
 80a19b2:	4620      	movne	r0, r4
 80a19b4:	9b00      	ldreq	r3, [sp, #0]
 80a19b6:	602b      	streq	r3, [r5, #0]
 80a19b8:	b004      	add	sp, #16
 80a19ba:	bd70      	pop	{r4, r5, r6, pc}

080a19bc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a19bc:	9800      	ldr	r0, [sp, #0]
 80a19be:	4290      	cmp	r0, r2
 80a19c0:	bf14      	ite	ne
 80a19c2:	2001      	movne	r0, #1
 80a19c4:	2006      	moveq	r0, #6
 80a19c6:	4770      	bx	lr

080a19c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a19c8:	b510      	push	{r4, lr}
 80a19ca:	4604      	mov	r4, r0
 80a19cc:	4b02      	ldr	r3, [pc, #8]	; (80a19d8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a19ce:	6003      	str	r3, [r0, #0]
 80a19d0:	f000 f8cf 	bl	80a1b72 <_ZNSt9type_infoD1Ev>
 80a19d4:	4620      	mov	r0, r4
 80a19d6:	bd10      	pop	{r4, pc}
 80a19d8:	080a20ac 	.word	0x080a20ac

080a19dc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a19dc:	b510      	push	{r4, lr}
 80a19de:	4604      	mov	r4, r0
 80a19e0:	f7ff fff2 	bl	80a19c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a19e4:	4620      	mov	r0, r4
 80a19e6:	2108      	movs	r1, #8
 80a19e8:	f7ff ffc6 	bl	80a1978 <_ZdlPvj>
 80a19ec:	4620      	mov	r0, r4
 80a19ee:	bd10      	pop	{r4, pc}

080a19f0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a19f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a19f4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a19f8:	461f      	mov	r7, r3
 80a19fa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a19fe:	4598      	cmp	r8, r3
 80a1a00:	4606      	mov	r6, r0
 80a1a02:	4615      	mov	r5, r2
 80a1a04:	d107      	bne.n	80a1a16 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a1a06:	9907      	ldr	r1, [sp, #28]
 80a1a08:	f000 f8b6 	bl	80a1b78 <_ZNKSt9type_infoeqERKS_>
 80a1a0c:	b118      	cbz	r0, 80a1a16 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a1a0e:	7165      	strb	r5, [r4, #5]
 80a1a10:	2000      	movs	r0, #0
 80a1a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1a16:	4639      	mov	r1, r7
 80a1a18:	4630      	mov	r0, r6
 80a1a1a:	f000 f8ad 	bl	80a1b78 <_ZNKSt9type_infoeqERKS_>
 80a1a1e:	2800      	cmp	r0, #0
 80a1a20:	d0f6      	beq.n	80a1a10 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a1a22:	2301      	movs	r3, #1
 80a1a24:	f8c4 8000 	str.w	r8, [r4]
 80a1a28:	7125      	strb	r5, [r4, #4]
 80a1a2a:	71a3      	strb	r3, [r4, #6]
 80a1a2c:	e7f0      	b.n	80a1a10 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a1a2e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a1a2e:	b538      	push	{r3, r4, r5, lr}
 80a1a30:	4615      	mov	r5, r2
 80a1a32:	461c      	mov	r4, r3
 80a1a34:	f000 f8a0 	bl	80a1b78 <_ZNKSt9type_infoeqERKS_>
 80a1a38:	b120      	cbz	r0, 80a1a44 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a1a3a:	2308      	movs	r3, #8
 80a1a3c:	60e3      	str	r3, [r4, #12]
 80a1a3e:	2306      	movs	r3, #6
 80a1a40:	6025      	str	r5, [r4, #0]
 80a1a42:	7123      	strb	r3, [r4, #4]
 80a1a44:	bd38      	pop	{r3, r4, r5, pc}

080a1a46 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a1a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1a4a:	4605      	mov	r5, r0
 80a1a4c:	460c      	mov	r4, r1
 80a1a4e:	4616      	mov	r6, r2
 80a1a50:	461f      	mov	r7, r3
 80a1a52:	f000 f891 	bl	80a1b78 <_ZNKSt9type_infoeqERKS_>
 80a1a56:	b948      	cbnz	r0, 80a1a6c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a1a58:	2f03      	cmp	r7, #3
 80a1a5a:	d807      	bhi.n	80a1a6c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a1a5c:	6823      	ldr	r3, [r4, #0]
 80a1a5e:	4632      	mov	r2, r6
 80a1a60:	4629      	mov	r1, r5
 80a1a62:	4620      	mov	r0, r4
 80a1a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a1a68:	695b      	ldr	r3, [r3, #20]
 80a1a6a:	4718      	bx	r3
 80a1a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1a70 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a1a70:	b510      	push	{r4, lr}
 80a1a72:	4604      	mov	r4, r0
 80a1a74:	4b02      	ldr	r3, [pc, #8]	; (80a1a80 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a1a76:	6003      	str	r3, [r0, #0]
 80a1a78:	f7ff ffa6 	bl	80a19c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a1a7c:	4620      	mov	r0, r4
 80a1a7e:	bd10      	pop	{r4, pc}
 80a1a80:	080a210c 	.word	0x080a210c

080a1a84 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a1a84:	b510      	push	{r4, lr}
 80a1a86:	4604      	mov	r4, r0
 80a1a88:	f7ff fff2 	bl	80a1a70 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a1a8c:	4620      	mov	r0, r4
 80a1a8e:	210c      	movs	r1, #12
 80a1a90:	f7ff ff72 	bl	80a1978 <_ZdlPvj>
 80a1a94:	4620      	mov	r0, r4
 80a1a96:	bd10      	pop	{r4, pc}

080a1a98 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a1a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1a9c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a1aa0:	4606      	mov	r6, r0
 80a1aa2:	4590      	cmp	r8, r2
 80a1aa4:	460f      	mov	r7, r1
 80a1aa6:	4615      	mov	r5, r2
 80a1aa8:	461c      	mov	r4, r3
 80a1aaa:	d00b      	beq.n	80a1ac4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a1aac:	68b0      	ldr	r0, [r6, #8]
 80a1aae:	462a      	mov	r2, r5
 80a1ab0:	6803      	ldr	r3, [r0, #0]
 80a1ab2:	f8cd 8018 	str.w	r8, [sp, #24]
 80a1ab6:	6a1e      	ldr	r6, [r3, #32]
 80a1ab8:	4639      	mov	r1, r7
 80a1aba:	4623      	mov	r3, r4
 80a1abc:	46b4      	mov	ip, r6
 80a1abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a1ac2:	4760      	bx	ip
 80a1ac4:	4619      	mov	r1, r3
 80a1ac6:	f000 f857 	bl	80a1b78 <_ZNKSt9type_infoeqERKS_>
 80a1aca:	2800      	cmp	r0, #0
 80a1acc:	d0ee      	beq.n	80a1aac <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a1ace:	2006      	movs	r0, #6
 80a1ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1ad4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a1ad4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1ad8:	460d      	mov	r5, r1
 80a1ada:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a1ade:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a1ae2:	4619      	mov	r1, r3
 80a1ae4:	4681      	mov	r9, r0
 80a1ae6:	4617      	mov	r7, r2
 80a1ae8:	4698      	mov	r8, r3
 80a1aea:	f000 f845 	bl	80a1b78 <_ZNKSt9type_infoeqERKS_>
 80a1aee:	b190      	cbz	r0, 80a1b16 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a1af0:	2d00      	cmp	r5, #0
 80a1af2:	6034      	str	r4, [r6, #0]
 80a1af4:	7137      	strb	r7, [r6, #4]
 80a1af6:	db09      	blt.n	80a1b0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a1af8:	442c      	add	r4, r5
 80a1afa:	45a2      	cmp	sl, r4
 80a1afc:	bf0c      	ite	eq
 80a1afe:	2406      	moveq	r4, #6
 80a1b00:	2401      	movne	r4, #1
 80a1b02:	71b4      	strb	r4, [r6, #6]
 80a1b04:	2000      	movs	r0, #0
 80a1b06:	b001      	add	sp, #4
 80a1b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1b0c:	3502      	adds	r5, #2
 80a1b0e:	d1f9      	bne.n	80a1b04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a1b10:	2301      	movs	r3, #1
 80a1b12:	71b3      	strb	r3, [r6, #6]
 80a1b14:	e7f6      	b.n	80a1b04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a1b16:	4554      	cmp	r4, sl
 80a1b18:	d106      	bne.n	80a1b28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a1b1a:	4659      	mov	r1, fp
 80a1b1c:	4648      	mov	r0, r9
 80a1b1e:	f000 f82b 	bl	80a1b78 <_ZNKSt9type_infoeqERKS_>
 80a1b22:	b108      	cbz	r0, 80a1b28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a1b24:	7177      	strb	r7, [r6, #5]
 80a1b26:	e7ed      	b.n	80a1b04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a1b28:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a1b2c:	463a      	mov	r2, r7
 80a1b2e:	6803      	ldr	r3, [r0, #0]
 80a1b30:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a1b34:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a1b38:	69dc      	ldr	r4, [r3, #28]
 80a1b3a:	4629      	mov	r1, r5
 80a1b3c:	4643      	mov	r3, r8
 80a1b3e:	46a4      	mov	ip, r4
 80a1b40:	b001      	add	sp, #4
 80a1b42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1b46:	4760      	bx	ip

080a1b48 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a1b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1b4c:	4607      	mov	r7, r0
 80a1b4e:	460c      	mov	r4, r1
 80a1b50:	4615      	mov	r5, r2
 80a1b52:	461e      	mov	r6, r3
 80a1b54:	f7ff ff6b 	bl	80a1a2e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a1b58:	b948      	cbnz	r0, 80a1b6e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a1b5a:	68b8      	ldr	r0, [r7, #8]
 80a1b5c:	462a      	mov	r2, r5
 80a1b5e:	6803      	ldr	r3, [r0, #0]
 80a1b60:	4621      	mov	r1, r4
 80a1b62:	699f      	ldr	r7, [r3, #24]
 80a1b64:	4633      	mov	r3, r6
 80a1b66:	46bc      	mov	ip, r7
 80a1b68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a1b6c:	4760      	bx	ip
 80a1b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1b72 <_ZNSt9type_infoD1Ev>:
 80a1b72:	4770      	bx	lr

080a1b74 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a1b74:	2000      	movs	r0, #0
 80a1b76:	4770      	bx	lr

080a1b78 <_ZNKSt9type_infoeqERKS_>:
 80a1b78:	4281      	cmp	r1, r0
 80a1b7a:	b508      	push	{r3, lr}
 80a1b7c:	d00e      	beq.n	80a1b9c <_ZNKSt9type_infoeqERKS_+0x24>
 80a1b7e:	6840      	ldr	r0, [r0, #4]
 80a1b80:	7803      	ldrb	r3, [r0, #0]
 80a1b82:	2b2a      	cmp	r3, #42	; 0x2a
 80a1b84:	d00c      	beq.n	80a1ba0 <_ZNKSt9type_infoeqERKS_+0x28>
 80a1b86:	6849      	ldr	r1, [r1, #4]
 80a1b88:	780b      	ldrb	r3, [r1, #0]
 80a1b8a:	2b2a      	cmp	r3, #42	; 0x2a
 80a1b8c:	bf08      	it	eq
 80a1b8e:	3101      	addeq	r1, #1
 80a1b90:	f000 f848 	bl	80a1c24 <strcmp>
 80a1b94:	fab0 f080 	clz	r0, r0
 80a1b98:	0940      	lsrs	r0, r0, #5
 80a1b9a:	bd08      	pop	{r3, pc}
 80a1b9c:	2001      	movs	r0, #1
 80a1b9e:	e7fc      	b.n	80a1b9a <_ZNKSt9type_infoeqERKS_+0x22>
 80a1ba0:	2000      	movs	r0, #0
 80a1ba2:	e7fa      	b.n	80a1b9a <_ZNKSt9type_infoeqERKS_+0x22>

080a1ba4 <atexit>:
 80a1ba4:	2300      	movs	r3, #0
 80a1ba6:	4601      	mov	r1, r0
 80a1ba8:	461a      	mov	r2, r3
 80a1baa:	4618      	mov	r0, r3
 80a1bac:	f000 b84c 	b.w	80a1c48 <__register_exitproc>

080a1bb0 <memcpy>:
 80a1bb0:	440a      	add	r2, r1
 80a1bb2:	4291      	cmp	r1, r2
 80a1bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 80a1bb8:	d100      	bne.n	80a1bbc <memcpy+0xc>
 80a1bba:	4770      	bx	lr
 80a1bbc:	b510      	push	{r4, lr}
 80a1bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1bc2:	4291      	cmp	r1, r2
 80a1bc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1bc8:	d1f9      	bne.n	80a1bbe <memcpy+0xe>
 80a1bca:	bd10      	pop	{r4, pc}

080a1bcc <memset>:
 80a1bcc:	4603      	mov	r3, r0
 80a1bce:	4402      	add	r2, r0
 80a1bd0:	4293      	cmp	r3, r2
 80a1bd2:	d100      	bne.n	80a1bd6 <memset+0xa>
 80a1bd4:	4770      	bx	lr
 80a1bd6:	f803 1b01 	strb.w	r1, [r3], #1
 80a1bda:	e7f9      	b.n	80a1bd0 <memset+0x4>

080a1bdc <srand>:
 80a1bdc:	b538      	push	{r3, r4, r5, lr}
 80a1bde:	4b0d      	ldr	r3, [pc, #52]	; (80a1c14 <srand+0x38>)
 80a1be0:	4604      	mov	r4, r0
 80a1be2:	681d      	ldr	r5, [r3, #0]
 80a1be4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1be6:	b97b      	cbnz	r3, 80a1c08 <srand+0x2c>
 80a1be8:	2018      	movs	r0, #24
 80a1bea:	f7fe ffdf 	bl	80a0bac <malloc>
 80a1bee:	4a0a      	ldr	r2, [pc, #40]	; (80a1c18 <srand+0x3c>)
 80a1bf0:	4b0a      	ldr	r3, [pc, #40]	; (80a1c1c <srand+0x40>)
 80a1bf2:	63a8      	str	r0, [r5, #56]	; 0x38
 80a1bf4:	e9c0 2300 	strd	r2, r3, [r0]
 80a1bf8:	4b09      	ldr	r3, [pc, #36]	; (80a1c20 <srand+0x44>)
 80a1bfa:	2201      	movs	r2, #1
 80a1bfc:	6083      	str	r3, [r0, #8]
 80a1bfe:	230b      	movs	r3, #11
 80a1c00:	8183      	strh	r3, [r0, #12]
 80a1c02:	2300      	movs	r3, #0
 80a1c04:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1c08:	2200      	movs	r2, #0
 80a1c0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1c0c:	611c      	str	r4, [r3, #16]
 80a1c0e:	615a      	str	r2, [r3, #20]
 80a1c10:	bd38      	pop	{r3, r4, r5, pc}
 80a1c12:	bf00      	nop
 80a1c14:	20000018 	.word	0x20000018
 80a1c18:	abcd330e 	.word	0xabcd330e
 80a1c1c:	e66d1234 	.word	0xe66d1234
 80a1c20:	0005deec 	.word	0x0005deec

080a1c24 <strcmp>:
 80a1c24:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a1c28:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a1c2c:	2a01      	cmp	r2, #1
 80a1c2e:	bf28      	it	cs
 80a1c30:	429a      	cmpcs	r2, r3
 80a1c32:	d0f7      	beq.n	80a1c24 <strcmp>
 80a1c34:	1ad0      	subs	r0, r2, r3
 80a1c36:	4770      	bx	lr

080a1c38 <strlen>:
 80a1c38:	4603      	mov	r3, r0
 80a1c3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1c3e:	2a00      	cmp	r2, #0
 80a1c40:	d1fb      	bne.n	80a1c3a <strlen+0x2>
 80a1c42:	1a18      	subs	r0, r3, r0
 80a1c44:	3801      	subs	r0, #1
 80a1c46:	4770      	bx	lr

080a1c48 <__register_exitproc>:
 80a1c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1c4c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a1d0c <__register_exitproc+0xc4>
 80a1c50:	4606      	mov	r6, r0
 80a1c52:	f8d8 0000 	ldr.w	r0, [r8]
 80a1c56:	461f      	mov	r7, r3
 80a1c58:	460d      	mov	r5, r1
 80a1c5a:	4691      	mov	r9, r2
 80a1c5c:	f000 f858 	bl	80a1d10 <__retarget_lock_acquire_recursive>
 80a1c60:	4b26      	ldr	r3, [pc, #152]	; (80a1cfc <__register_exitproc+0xb4>)
 80a1c62:	681c      	ldr	r4, [r3, #0]
 80a1c64:	b934      	cbnz	r4, 80a1c74 <__register_exitproc+0x2c>
 80a1c66:	4c26      	ldr	r4, [pc, #152]	; (80a1d00 <__register_exitproc+0xb8>)
 80a1c68:	601c      	str	r4, [r3, #0]
 80a1c6a:	4b26      	ldr	r3, [pc, #152]	; (80a1d04 <__register_exitproc+0xbc>)
 80a1c6c:	b113      	cbz	r3, 80a1c74 <__register_exitproc+0x2c>
 80a1c6e:	681b      	ldr	r3, [r3, #0]
 80a1c70:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a1c74:	6863      	ldr	r3, [r4, #4]
 80a1c76:	2b1f      	cmp	r3, #31
 80a1c78:	dd07      	ble.n	80a1c8a <__register_exitproc+0x42>
 80a1c7a:	f8d8 0000 	ldr.w	r0, [r8]
 80a1c7e:	f000 f849 	bl	80a1d14 <__retarget_lock_release_recursive>
 80a1c82:	f04f 30ff 	mov.w	r0, #4294967295
 80a1c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1c8a:	b35e      	cbz	r6, 80a1ce4 <__register_exitproc+0x9c>
 80a1c8c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a1c90:	b988      	cbnz	r0, 80a1cb6 <__register_exitproc+0x6e>
 80a1c92:	4b1d      	ldr	r3, [pc, #116]	; (80a1d08 <__register_exitproc+0xc0>)
 80a1c94:	b923      	cbnz	r3, 80a1ca0 <__register_exitproc+0x58>
 80a1c96:	f8d8 0000 	ldr.w	r0, [r8]
 80a1c9a:	f000 f83a 	bl	80a1d12 <__retarget_lock_release>
 80a1c9e:	e7f0      	b.n	80a1c82 <__register_exitproc+0x3a>
 80a1ca0:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a1ca4:	f7fe ff82 	bl	80a0bac <malloc>
 80a1ca8:	2800      	cmp	r0, #0
 80a1caa:	d0f4      	beq.n	80a1c96 <__register_exitproc+0x4e>
 80a1cac:	2300      	movs	r3, #0
 80a1cae:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a1cb2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a1cb6:	2201      	movs	r2, #1
 80a1cb8:	6863      	ldr	r3, [r4, #4]
 80a1cba:	2e02      	cmp	r6, #2
 80a1cbc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a1cc0:	fa02 f203 	lsl.w	r2, r2, r3
 80a1cc4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a1cc8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a1ccc:	ea43 0302 	orr.w	r3, r3, r2
 80a1cd0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a1cd4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a1cd8:	bf02      	ittt	eq
 80a1cda:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a1cde:	431a      	orreq	r2, r3
 80a1ce0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a1ce4:	6863      	ldr	r3, [r4, #4]
 80a1ce6:	f8d8 0000 	ldr.w	r0, [r8]
 80a1cea:	1c5a      	adds	r2, r3, #1
 80a1cec:	3302      	adds	r3, #2
 80a1cee:	6062      	str	r2, [r4, #4]
 80a1cf0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a1cf4:	f000 f80e 	bl	80a1d14 <__retarget_lock_release_recursive>
 80a1cf8:	2000      	movs	r0, #0
 80a1cfa:	e7c4      	b.n	80a1c86 <__register_exitproc+0x3e>
 80a1cfc:	20000650 	.word	0x20000650
 80a1d00:	200005c4 	.word	0x200005c4
 80a1d04:	00000000 	.word	0x00000000
 80a1d08:	080a0bad 	.word	0x080a0bad
 80a1d0c:	2000007c 	.word	0x2000007c

080a1d10 <__retarget_lock_acquire_recursive>:
 80a1d10:	4770      	bx	lr

080a1d12 <__retarget_lock_release>:
 80a1d12:	4770      	bx	lr

080a1d14 <__retarget_lock_release_recursive>:
 80a1d14:	4770      	bx	lr

080a1d16 <link_code_end>:
	...

080a1d18 <dynalib_user>:
 80a1d18:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a1d28:	0000 0000 6552 6563 7669 6465 6120 6d20     ....Received a m
 80a1d38:	7365 6173 6567 6f20 206e 6f74 6970 3a63     essage on topic:
 80a1d48:	0020 202e 654d 7373 6761 3a65 0020 6f43      .. Message: .Co
 80a1d58:	6e6e 6365 6974 676e 7420 206f 6957 6946     nnecting to WiFi
 80a1d68:	2e2e 002e 6f43 6e6e 6365 6574 2064 6f74     ....Connected to
 80a1d78:	5720 4669 0069 6f43 6e6e 6365 6574 2064      WiFi.Connected 
 80a1d88:	6f74 4d20 5451 2054 7242 6b6f 7265 7400     to MQTT Broker.t
 80a1d98:	7365 2f74 6f74 6970 0063 6146 6c69 6465     est/topic.Failed
 80a1da8:	7420 206f 6f63 6e6e 6365 2074 6f74 4d20      to connect to M
 80a1db8:	5451 2054 7242 6b6f 7265 5400 5043 6320     QTT Broker.TCP c
 80a1dc8:	6e6f 656e 7463 6465 5400 5043 6320 6e6f     onnected.TCP con
 80a1dd8:	656e 7463 6f69 206e 6166 6c69 6465 7000     nection failed.p
 80a1de8:	6f68 6f74 366e 5f30 7169 7969 766a 6a61     hoton60_iqiyjvaj
 80a1df8:	0061 6976 6c6c 4e61 766f 0061 6365 3265     a.villaNova.ece2
 80a1e08:	3334 0031 7553 6363 7365 0073 6146 6c69     431.Success.Fail
 80a1e18:	6465 7520 6973 676e 4920 4150 6464 6572     ed using IPAddre
 80a1e28:	7373 0a00 200a 6150 7373 6465 7420 7261     ss... Passed tar
 80a1e38:	6567 2074 6461 7264 7365 2073 6e69 6f66     get address info
 80a1e48:	0020 5049 003a 6f50 7472 003a 6f43 6e6e      .IP:.Port:.Conn
 80a1e58:	6365 6974 676e 2e2e 002e 6f43 6e6e 6365     ecting....Connec
 80a1e68:	6974 6e6f 5320 6174 7574 3a73 0a00 000a     tion Status:....
 80a1e78:	7245 6f72 2072 6e69 2120 635f 696c 6e65     Error in !_clien
 80a1e88:	2e74 7661 6961 616c 6c62 2865 0029 7245     t.available().Er
 80a1e98:	6f72 2072 6e69 6920 4373 6e6f 656e 7463     ror in isConnect
 80a1ea8:	6465 2928 0000 4d04 5451 0454 0600 514d     ed()...MQTT...MQ
 80a1eb8:	7349 7064 7703 7269 6e69 0067 4354 4350     Isdp.wiring.TCPC
 80a1ec8:	696c 6e65 2074 6f73 6b63 7465 253d 0078     lient socket=%x.

080a1ed8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a1ee0:	0c55 080a 0c7d 080a 109f 080a 0c8b 080a     U...}...........
 80a1ef0:	0c59 080a                                   Y...

080a1ef4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a1efc <_ZTV9TCPClient>:
	...
 80a1f04:	0c91 080a 0cc5 080a 0c11 080a 0c2b 080a     ............+...
 80a1f14:	0ea1 080a 0d27 080a 0cf9 080a 0c53 080a     ....'.......S...
 80a1f24:	0dc1 080a 10a5 080a 0d5b 080a 0f15 080a     ........[.......
 80a1f34:	0fc3 080a 0f7b 080a 0c3b 080a 0f89 080a     ....{...;.......
 80a1f44:	0cd9 080a 7061 0070 5925 252d 2d6d 6425     ....app.%Y-%m-%d
 80a1f54:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80a1f64:	6d69 0065                                   ime.

080a1f68 <_ZTV9IPAddress>:
	...
 80a1f70:	1455 080a 1445 080a 1447 080a               U...E...G...

080a1f7c <_ZTV9USBSerial>:
	...
 80a1f84:	153b 080a 15a1 080a 1579 080a 11df 080a     ;.......y.......
 80a1f94:	156b 080a 153d 080a 154d 080a 159b 080a     k...=...M.......
 80a1fa4:	155d 080a 1535 080a                         ]...5...

080a1fac <_ZTV11USARTSerial>:
	...
 80a1fb4:	16c9 080a 1733 080a 170f 080a 11df 080a     ....3...........
 80a1fc4:	16df 080a 16fb 080a 16ed 080a 1709 080a     ................
 80a1fd4:	16cb 080a 16d1 080a                         ........

080a1fdc <_ZTVN5spark9WiFiClassE>:
	...
 80a1fe4:	184b 080a 1841 080a 1837 080a 17b5 080a     K...A...7.......
 80a1ff4:	129f 080a 182b 080a 18a9 080a 18b1 080a     ....+...........
 80a2004:	181f 080a 1817 080a 180d 080a 1803 080a     ................
 80a2014:	17bf 080a                                   ....

080a2018 <_ZTVN5spark12NetworkClassE>:
	...
 80a2020:	1869 080a 1873 080a 187d 080a 1887 080a     i...s...}.......
 80a2030:	1891 080a 189d 080a 18a9 080a 18b1 080a     ................
 80a2040:	18b9 080a 18c5 080a 18cd 080a 18d7 080a     ................
 80a2050:	18e1 080a                                   ....

080a2054 <_ZTSSt19_Sp_make_shared_tag>:
 80a2054:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 80a2064:	6572 5f64 6174 0067                         red_tag.

080a206c <_ZTISt19_Sp_make_shared_tag>:
 80a206c:	20ac 080a 2054 080a                         . ..T ..

080a2074 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a2074:	210c 080a 2080 080a 2130 080a               .!... ..0!..

080a2080 <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a2080:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 80a2090:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 80a20a0:	0045 0000                                   E...

080a20a4 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a20a4:	0000 0000 2074 080a 19c9 080a 19dd 080a     ....t ..........
 80a20b4:	1b75 080a 1b75 080a 1a47 080a 1989 080a     u...u...G.......
 80a20c4:	1a2f 080a 19f1 080a 19bd 080a               /...........

080a20d0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a20d0:	210c 080a 20dc 080a 2074 080a               .!... ..t ..

080a20dc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a20dc:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 80a20ec:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 80a20fc:	666e 456f 0000 0000                         nfoE....

080a2104 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a2104:	0000 0000 20d0 080a 1a71 080a 1a85 080a     ..... ..q.......
 80a2114:	1b75 080a 1b75 080a 1a47 080a 1989 080a     u...u...G.......
 80a2124:	1b49 080a 1ad5 080a 1a99 080a               I...........

080a2130 <_ZTISt9type_info>:
 80a2130:	20ac 080a 2138 080a                         . ..8!..

080a2138 <_ZTSSt9type_info>:
 80a2138:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

080a2145 <link_const_variable_data_end>:
 80a2145:	00          	.byte	0x00
	...

080a2148 <link_constructors_location>:
 80a2148:	080a01f5 	.word	0x080a01f5
 80a214c:	080a0bed 	.word	0x080a0bed
 80a2150:	080a12ad 	.word	0x080a12ad
 80a2154:	080a12bd 	.word	0x080a12bd
 80a2158:	080a12d9 	.word	0x080a12d9
 80a215c:	080a1855 	.word	0x080a1855
 80a2160:	080a1949 	.word	0x080a1949
 80a2164:	080a195d 	.word	0x080a195d

080a2168 <link_constructors_end>:
	...
